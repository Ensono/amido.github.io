"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[4626,7870],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),g=u(n),d=a,m=g["".concat(s,".").concat(d)]||g[d]||c[d]||l;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[g]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){var r=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return c}});var r=n(7462),a=n(7294),l=n(2389),o=n(9443);var i=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(9521),u=n(6010),p={tabItem:"tabItem_vU9c"};function g(e){var t,n,r,l=e.lazy,o=e.block,g=e.defaultValue,c=e.values,d=e.groupId,m=e.className,k=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=c?c:k.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),h=(0,s.lx)(f,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===g?g:null!=(t=null!=g?g:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=k[0])?void 0:r.props.value;if(null!==N&&!f.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=i(),v=b.tabGroupChoices,y=b.setTabGroupChoices,w=(0,a.useState)(N),x=w[0],T=w[1],j=[],O=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=v[d];null!=E&&E!==x&&f.some((function(e){return e.value===E}))&&T(E)}var P=function(e){var t=e.currentTarget,n=j.indexOf(t),r=f[n].value;r!==x&&(O(t),T(r),null!=d&&y(d,r))},C=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=j.indexOf(e.currentTarget)+1;n=j[r]||j[0];break;case"ArrowLeft":var a=j.indexOf(e.currentTarget)-1;n=j[a]||j[j.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":o},m)},f.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,u.Z)("tabs__item",p.tabItem,{"tabs__item--active":x===t}),key:t,ref:function(e){return j.push(e)},onKeyDown:C,onFocus:P,onClick:P},null!=n?n:t)}))),l?(0,a.cloneElement)(k.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function c(e){var t=(0,l.Z)();return a.createElement(g,(0,r.Z)({key:String(t)},e))}},9443:function(e,t,n){var r=(0,n(7294).createContext)(void 0);t.Z=r},1891:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return g},default:function(){return f},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=n(6835),i=n(6396),s=n(8215),u=["components"],p={id:"ensono-stacks-logger",title:"@ensono-stacks/logger",sidebar_label:"@ensono-stacks/logger",description:"Using the logger with stacks!",keywords:["Nx","monorepo","stacks","ensono","logger","generator","executor"]},g=void 0,c={unversionedId:"nx/logger/ensono-stacks-logger",id:"nx/logger/ensono-stacks-logger",isDocsHomePage:!1,title:"@ensono-stacks/logger",description:"Using the logger with stacks!",source:"@site/docs/nx/logger/plugin-information.md",sourceDirName:"nx/logger",slug:"/nx/logger/ensono-stacks-logger",permalink:"/docs/nx/logger/ensono-stacks-logger",tags:[],version:"current",frontMatter:{id:"ensono-stacks-logger",title:"@ensono-stacks/logger",sidebar_label:"@ensono-stacks/logger",description:"Using the logger with stacks!",keywords:["Nx","monorepo","stacks","ensono","logger","generator","executor"]},sidebar:"docs",previous:{title:"@ensono-stacks/cypress",permalink:"/docs/nx/cypress/ensono-stacks-cypress"},next:{title:"Introduction",permalink:"/docs/workloads/common/backend/java/intro_java"}},d=[{value:"Setting up @ensono-stacks/logger",id:"setting-up-ensono-stackslogger",children:[{value:"Prerequisites",id:"prerequisites",children:[],level:3},{value:"Installation",id:"installation",children:[],level:3}],level:2},{value:"Executors and Generators",id:"executors-and-generators",children:[{value:"Generators",id:"generators",children:[],level:3}],level:2}],m={toc:d},k="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,u);return(0,l.kt)(k,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@ensono-stacks/logger")," plugin allows you to add industry standard logging functionality to your Stacks apps."),(0,l.kt)("p",null,"Currently, the following logging libraries are supported:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("a",{parentName:"strong",href:"https://github.com/winstonjs/winston"},"winston")))),(0,l.kt)("h2",{id:"setting-up-ensono-stackslogger"},"Setting up @ensono-stacks/logger"),(0,l.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"An existing Stacks workspace."),(0,l.kt)("h3",{id:"installation"},"Installation"),(0,l.kt)("p",null,"Install the @ensono-stacks/logger with the following command:"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"npm",label:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @ensono-stacks/logger@latest\n"))),(0,l.kt)(s.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev @ensono-stacks/logger@latest\n")))),(0,l.kt)("h2",{id:"executors-and-generators"},"Executors and Generators"),(0,l.kt)("p",null,"To see a list of the plugin capabilities run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nx list @ensono-stacks/logger\n")),(0,l.kt)("p",null,"View additional information about a plugin capability through the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nx g @ensono-stacks/logger:[generator-executor-name] --help\n")),(0,l.kt)("h3",{id:"generators"},"Generators"),(0,l.kt)(o.default,{mdxType:"Winston"}))}f.isMDXComponent=!0},6835:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={},s=void 0,u={unversionedId:"nx/logger/winston",id:"nx/logger/winston",isDocsHomePage:!1,title:"winston",description:"@ensono-stacks/logger:winston",source:"@site/docs/nx/logger/winston.md",sourceDirName:"nx/logger",slug:"/nx/logger/winston",permalink:"/docs/nx/logger/winston",tags:[],version:"current",frontMatter:{}},p=[{value:"@ensono-stacks/logger:winston",id:"ensono-stacksloggerwinston",children:[],level:3},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Command line arguments",id:"command-line-arguments",children:[],level:3},{value:"Generator Output",id:"generator-output",children:[],level:3},{value:"Importing the logger into your app",id:"importing-the-logger-into-your-app",children:[],level:3},{value:"Other resources",id:"other-resources",children:[],level:3}],level:2}],g={toc:p},c="wrapper";function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)(c,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"ensono-stacksloggerwinston"},"@ensono-stacks/logger:winston"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Add Winston to your project"),"Generates a new Nx library which contains a Winston logger instance and associated config.",(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"An existing Stacks workspace."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nx g @ensono-stacks/logger:winston\n")),(0,l.kt)("h3",{id:"command-line-arguments"},"Command line arguments"),(0,l.kt)("p",null,"The following command line arguments are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Accepted Values"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Available in interactive prompt?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--name"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the generated library"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--tags"),(0,l.kt)("td",{parentName:"tr",align:null},"Add tags to the project (used for linting)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--directory"),(0,l.kt)("td",{parentName:"tr",align:null},"Directory where the project is placed (within Nx libs directory)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--skipFormat"),(0,l.kt)("td",{parentName:"tr",align:null},"Skip formatting files"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--logLevelType"),(0,l.kt)("td",{parentName:"tr",align:null},"The type of log levels that will be used"),(0,l.kt)("td",{parentName:"tr",align:null},"enum"),(0,l.kt)("td",{parentName:"tr",align:null},"cli/syslog/npm"),(0,l.kt)("td",{parentName:"tr",align:null},"npm"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--consoleLogs"),(0,l.kt)("td",{parentName:"tr",align:null},"Output logs to the console"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--fileTransportPath"),(0,l.kt)("td",{parentName:"tr",align:null},"File path used for logs transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransport"),(0,l.kt)("td",{parentName:"tr",align:null},"Add a http transport"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportHost"),(0,l.kt)("td",{parentName:"tr",align:null},"Remote host of the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportPort"),(0,l.kt)("td",{parentName:"tr",align:null},"Remote port of the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportPath"),(0,l.kt)("td",{parentName:"tr",align:null},"Remote URI of the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportSSL"),(0,l.kt)("td",{parentName:"tr",align:null},"Use SSL for the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--streamPath"),(0,l.kt)("td",{parentName:"tr",align:null},"Stream transport path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"generator-output"},"Generator Output"),(0,l.kt)("p",null,"The generator will create a new application within your libs folder with the following structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},".\n\u251c\u2500\u2500 libs/[libname]\n\u2502   \u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 index.ts // Contains the Winston configuration and creates the logger instance\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 index.test.ts // Tests for the logger\n\u2502   \u251c\u2500\u2500 .eslintrc.json // ESLint config - extends from workspace config\n\u2502   \u251c\u2500\u2500 jest.config.ts // Jest config - extends from workspace config\n\u2502   \u251c\u2500\u2500 project.json // Nx config file for the library\n\u2502   \u251c\u2500\u2500 tsconfig.json // Main Typescript config for the library - extends workspace config & references the below two tsconfig files\n\u2502   \u251c\u2500\u2500 tsconfig.lib.json // Typescript config for the library's source files (excluding tests)\n\u2502   \u251c\u2500\u2500 tsconfig.spec.json // Typescript config for the library's test files\n\u2502   \u251c\u2500\u2500 README.md // Information on the library and how to run scripts\n\u251c\u2500\u2500 jest.config.ts // Workspace-level Jest config - created if this does not already exist\n\u2514\u2500\u2500 jest.preset.ts // Workspace-leve Jest preset that extends `@nx/jest/preset` - created if this does not already exist.\n\n")),(0,l.kt)("p",null,"Additionally, the following files will be modified"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},".\n\u251c\u2500\u2500 nx.json // Adds configuration for Jest tests if this has not already been done by another generator\n\u251c\u2500\u2500 package.json // Adds winston as a dependency\n\u2514\u2500\u2500 tsconfig.base.json // Adds new library into `paths` field\n\n")),(0,l.kt)("h3",{id:"importing-the-logger-into-your-app"},"Importing the logger into your app"),(0,l.kt)("p",null,"Having created a logger using the above ",(0,l.kt)("a",{parentName:"p",href:"#usage"},"command"),", import the Winston logger instance from the newly created library (the import name can be found within the ",(0,l.kt)("inlineCode",{parentName:"p"},"tsconfig.base.json")," files ",(0,l.kt)("inlineCode",{parentName:"p"},"paths")," field) into your application:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import logger from '@workspace-name/mynewlogger'\n\nlogger.log({\n    level: 'info',\n    message: 'I love Ensono Stacks!', \n})\n")),(0,l.kt)("p",null,"To change how Winston is configured, edit the created library:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=./libs/mynewlogger/src/index.ts",title:"./libs/mynewlogger/src/index.ts"},"const logger = winston.createLogger(logConfiguration);\n\n// Custom transport for non-production\nif (process.env.NODE_ENV !== 'production') {\n    logger.add(new winston.transports.Console({\n        format: winston.format.simple(), \n    })) \n} \n \nexport default logger;\n")),(0,l.kt)("h3",{id:"other-resources"},"Other resources"),(0,l.kt)("p",null,"Documentation for Winston can be found ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston"},"here"),".")))}d.isMDXComponent=!0}}]);