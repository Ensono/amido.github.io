"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[7329],{8453:(e,t,r)=>{r.d(t,{R:()=>c,x:()=>s});var n=r(6540);const i={},a=n.createContext(i);function c(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(a.Provider,{value:t},e.children)}},8571:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"workloads/common/backend/java/architecture/web_api/architecture_java","title":"Java Rest API Architecture","description":"Spring Boot Rest API Architecture","source":"@site/docs/workloads/common/backend/java/architecture/web_api/architecture_java.md","sourceDirName":"workloads/common/backend/java/architecture/web_api","slug":"/workloads/common/backend/java/architecture/web_api/architecture_java","permalink":"/docs/workloads/common/backend/java/architecture/web_api/architecture_java","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"architecture_java","title":"Java Rest API Architecture","sidebar_label":"Architecture overview","hide_title":false,"hide_table_of_contents":true,"description":"Spring Boot Rest API Architecture","keywords":["java","rest","api","architecture","spring boot","event","controller","logs","monitoring","query service","repository","azure cosmos db","event handler","event listener","event dispatcher","authorisation"]},"sidebar":"docs","previous":{"title":"Core Messaging module","permalink":"/docs/workloads/common/backend/java/architecture/dependency_messaging_java"},"next":{"title":"Project structure","permalink":"/docs/workloads/common/backend/java/architecture/web_api/structure_java"}}');var i=r(4848),a=r(8453),c=r(6025);const s={id:"architecture_java",title:"Java Rest API Architecture",sidebar_label:"Architecture overview",hide_title:!1,hide_table_of_contents:!0,description:"Spring Boot Rest API Architecture",keywords:["java","rest","api","architecture","spring boot","event","controller","logs","monitoring","query service","repository","azure cosmos db","event handler","event listener","event dispatcher","authorisation"]},o=void 0,d={},h=[{value:"Spring Boot Rest API Architecture",id:"spring-boot-rest-api-architecture",level:2}];function l(e){const t={h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"spring-boot-rest-api-architecture",children:"Spring Boot Rest API Architecture"}),"\n",(0,i.jsx)(t.p,{children:"The diagram below represents the architecture used in the project."}),"\n",(0,i.jsx)("img",{alt:"Project architecture CQRS",src:(0,c.Ay)("img/java-non-cqrs.png")}),"\n",(0,i.jsx)(t.p,{children:"Upon successful execution of a database update, the microservice publishes one or more events\ndescribing how the persistence state has changed e.g. if a \u201cCreate Category\u201d event is successful,\nthen a \u201cMenu Updated\u201d event and a \u201cCategory Created\u201d event will be published."}),"\n",(0,i.jsx)(t.p,{children:"Application Events contain the following basic information:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Event Attribute"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"id"}),(0,i.jsx)(t.td,{children:"Unique id of the event instance (format: uuid)"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"eventCode"}),(0,i.jsx)(t.td,{children:"Code identifying the type of event"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"correlationId"}),(0,i.jsx)(t.td,{children:"Transaction identifier. This attribute is also returned as a response header if the command was received via the REST API and can also be found in all log entries relating to the transaction. CorrelationID can either be supplied by the input event/request or generated when not supplied."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"operationCode"}),(0,i.jsx)(t.td,{children:"Code identifying the operation which generated the event"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"creationDate"}),(0,i.jsx)(t.td,{children:"When the event was created"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Custom Attribute(s)"}),(0,i.jsx)(t.td,{children:"e.g. menuId"})]})]})]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);