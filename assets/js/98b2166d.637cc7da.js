"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[1671],{7498:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>g});var o=i(4848),t=i(8453);const r={id:"logging_netcore",title:"Logging with Serilog and Application Insights",sidebar_label:"Logging",hide_title:!0,hide_table_of_contents:!1,description:"Logging for .NET Core",keywords:[".net core","logging","logger","serilog","application insights","standard","serilog configuration"]},s=void 0,a={id:"workloads/azure/backend/netcore/logging_netcore",title:"Logging with Serilog and Application Insights",description:"Logging for .NET Core",source:"@site/docs/workloads/azure/backend/netcore/logging_netcore.md",sourceDirName:"workloads/azure/backend/netcore",slug:"/workloads/azure/backend/netcore/logging_netcore",permalink:"/docs/workloads/azure/backend/netcore/logging_netcore",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"logging_netcore",title:"Logging with Serilog and Application Insights",sidebar_label:"Logging",hide_title:!0,hide_table_of_contents:!1,description:"Logging for .NET Core",keywords:[".net core","logging","logger","serilog","application insights","standard","serilog configuration"]},sidebar:"docs",previous:{title:"Pipeline",permalink:"/docs/workloads/azure/backend/netcore/pipeline_netcore"},next:{title:"Security",permalink:"/docs/workloads/azure/backend/netcore/security_netcore"}},l={},g=[{value:"Logging with Serilog and Application Insights",id:"logging-with-serilog-and-application-insights",level:2},{value:"Sinks",id:"sinks",level:3},{value:"Serilog Configuration",id:"serilog-configuration",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"logging-with-serilog-and-application-insights",children:"Logging with Serilog and Application Insights"}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(n.p,{children:[".NET Core provides a simple logging abstraction with most of required logging features used by an application. Everywhere in the application, when logging is required, the Classes generating logs should receive via dependency injection an instance of ",(0,o.jsx)(n.code,{children:"ILogger<>"})," to use as the logger object. The ",(0,o.jsx)(n.code,{children:"ILogger<>"})," instances are created by Logging Factory registered by each application and will abstract the logging library from the application logging."]}),"\n",(0,o.jsx)(n.p,{children:"The standard library has limited capabilities on log forwarding and requires additional packages to add proper filtering, enrichment and forwarding. For this reason the use of Serilog is required to extend the default logging features."}),"\n",(0,o.jsx)(n.p,{children:"Serilog integrates with the logger abstraction provided by DotNet Core. It provides additional Sink(outputs), Filter capabilities and Log Enrichment features to complete the limited set of features in .NET Core default loggers. Every services implemented using .NET Core should make use of Serilog library to standardize the logging approach."}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"sinks",children:"Sinks"}),"\n",(0,o.jsxs)(n.p,{children:["By default, the ",(0,o.jsx)(n.strong,{children:"Console"})," and ",(0,o.jsx)(n.strong,{children:"ApplicationInsights"})," sinks should be used."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"console sink"})," will output all logging generated by the service to the runtime console, and will make the logs available via command line tools like kubectl (kubectl get logs) providing a quick and straight forward way of getting the logs for a particular instance."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Application Insights"})," sink will make sure all logs generated(and filtered) are forwarded for the logging platform for correlation and future investigations."]}),"\n",(0,o.jsx)(n.p,{children:"Application Insights is the chosen logging platform and will aggregated all logs generated by all services. Console sink is an useful secondary output in order to facilitate investigation of issues with particular service that are failing. Having both setup, will make very straightforward to identify issues in real time or delayed investigation."}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h3,{id:"serilog-configuration",children:"Serilog Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["The following is a sample ",(0,o.jsx)(n.code,{children:"appsettings.json"})," file with annotations about logging configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "Serilog": {    // Logging configuration for Serilog\n    "Using": [\n      "Serilog.Sinks.Console",              // Import console sink package\n      "Serilog.Sinks.ApplicationInsights"   // Import ai sink package\n    ],\n    "MinimumLevel": {\n      "Default": "Information", // minimal log level for everything\n      "Override": {}            // Override for individual log sources\n    },\n    "WriteTo": [\n      { "Name": "Console" },    // Write Logs to console\n      {\n        "Name": "ApplicationInsights",  // Write Logs to App Insights\n        "Args": {\n          "telemetryConverter": "Serilog.Sinks.ApplicationInsights.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights"\n        }\n      }\n    ],\n    "Enrich": [ "FromLogContext", "WithMachineName", "WithThreadId" ], // Add custom attributes to the logs, Hostname and the ThreadId\n    "Destructure": [],\n    "Properties": {             // fixed attributes added to every log for filtering purposes\n      "Domain": "identity",     // domain name added to every log\n      "Service": "identityapi", // service generating the logs\n      "Environment": "dev",     // environment this instance belongs to\n    },\n    "Filter": [                 // Ignore logs that matches the following filters\n      {\n        "Name": "ByExcluding",\n        "Args": {\n          "expression": "EndsWith(RequestPath, \'/health\')" // Filter out health requests to reduce useless log information. Not required for non api services.\n        }\n      }\n    ]\n  }\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var o=i(6540);const t={},r=o.createContext(t);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);