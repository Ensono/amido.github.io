"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[2944],{7734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"developer/java/patterns/java_swagger_annotations","title":"Reducing Swagger Annotation Overload","description":"Reducing Swagger Annotation Overload","source":"@site/docs/developer/java/patterns/java_swagger_annotations.md","sourceDirName":"developer/java/patterns","slug":"/developer/java/patterns/java_swagger_annotations","permalink":"/docs/developer/java/patterns/java_swagger_annotations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"java_swagger_annotations","title":"Reducing Swagger Annotation Overload","sidebar_label":"Reducing Swagger Annotation Overload","description":"Reducing Swagger Annotation Overload","keywords":["development","java","backend","server-side"]},"sidebar":"docs","previous":{"title":"Reducing Bean Mapping Boilerplate","permalink":"/docs/developer/java/patterns/java_mapstruct_mapping"},"next":{"title":"Using the Ensono Stacks CLI","permalink":"/docs/stackscli/about"}}');var o=t(4848),s=t(8453);t(9557);const i={id:"java_swagger_annotations",title:"Reducing Swagger Annotation Overload",sidebar_label:"Reducing Swagger Annotation Overload",description:"Reducing Swagger Annotation Overload",keywords:["development","java","backend","server-side"]},r=void 0,l={},d=[{value:"Context",id:"context",level:2},{value:"Solution",id:"solution",level:2},{value:"Implementation Examples",id:"implementation-examples",level:2}];function c(e){const n={code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,o.jsx)(n.p,{children:"The API documentation is an essential part of building REST APIs to make the services available to all audience.\nThis documentation should help consumers of the service know which all services are available and its fine details.\nAlso, there should be some simple way to test if the service is up."}),"\n",(0,o.jsxs)(n.p,{children:["SpringDoc simplifies the generation and maintenance of API docs based on the OpenAPI 3 specification for the spring boot applications.\nThe exposed services are bound to change and the documentation needs to be updated as the services change.\nIf this is done manually, then it will become a complex process, and it will be prone to error, especially as the number of REST services increase.\nThis is where swagger helps to automate this documentation process and the consumers of this API would see the output of all of this in the swagger UI (for example, the Swagger API Doc Endpoint at ",(0,o.jsx)(n.em,{children:"/swagger/index.html"}),")."]}),"\n",(0,o.jsx)(n.p,{children:"The proliferation of Swagger annotation's means that there is a lot of duplicated APIResponse annotations that bloat the code and make it difficult to maintain and read."}),"\n",(0,o.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,o.jsx)(n.p,{children:'To avoid the code duplication around swagger annotations, we have opted to use our own @interface Java annotation to "carry" these annotations and make them a reusable unit\nwhich will minimise the duplicated Swagger annotations from controller methods.'}),"\n",(0,o.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,o.jsx)(n.p,{children:"We have defined custom java annotations per CRUD operation to be used by the controller classes. This will promote re-usability of the\nswagger annotations rather than duplicating the code across multiple controller classes."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example of java custom annotation:"})}),"\n",(0,o.jsx)(n.p,{children:"In the below example we have:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Added multiple Swagger REST response annotations to our own annotation"}),"\n",(0,o.jsx)(n.li,{children:"Added the Security Requirement annotation"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This is so that we have a single annotation that a developer can use to easily apply all of these Swagger repetitive annotations\nacross multiple classes using just a single annotation per class, therefore fixing the problem being addressed - annotation bloat."}),"\n",(0,o.jsx)(n.p,{children:"In the below example, we are creating ReadAPIResponses annotation."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@ApiResponses({@ApiResponse(\n    responseCode = "404",\n    description = "Resource not found",\n    content = {@Content(\n    mediaType = "application/json",\n    schema = @Schema(\n    implementation = ErrorResponse.class))}), \n  @ApiResponse(\n    responseCode = "400",\n    description = "Bad Request",\n    content = {@Content(\n    mediaType = "application/json",\n    schema = @Schema(\n    implementation = ErrorResponse.class))}\n  )})\n@SecurityRequirement(name = "bearerAuth")\npublic @interface ReadAPIResponses {}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Using the custom Annotation @ReadAPIResponses:"})}),"\n",(0,o.jsx)(n.p,{children:"In the below code example, java custom annotation @ReadAPIResponses has been used."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class MenuController {\n\n  @GetMapping(value = "/{id}")\n  @Operation(tags = "Menu", summary = "Get a menu", description = "By passing the menu id, ...")\n  @ReadAPIResponses\n  ResponseEntity<MenuDTO> getMenu(\n    @PathVariable(name = "id") UUID id,\n    @Parameter(hidden = true) @RequestAttribute("CorrelationId") String correlationId) {\n      \n        // Code here\n      \n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Overriding the custom annotations:"})}),"\n",(0,o.jsxs)(n.p,{children:["We can override our new custom annotation entries by placing the annotation ",(0,o.jsx)(n.strong,{children:"before the new custom annotation"}),".\nIn the below example, @ApiResponse entry will ",(0,o.jsx)(n.strong,{children:"override"})," the 200 response code in @ReadAPIResponses custom annotation as the @ApiResponse comes ",(0,o.jsx)(n.strong,{children:"before"}),"\n@ReadAPIResponses. We just have to make that the annotations are placed in the right order."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class MenuController {\n\n  @GetMapping(value = "/{id}")\n  @Operation(tags = "Menu", summary = "Get a menu", description = "By passing the menu id, ...")\n  @ApiResponse(\n      responseCode = "200",\n      description = "Menu",\n      content =\n      @Content(\n          mediaType = MediaType.APPLICATION_JSON_VALUE,\n          schema = @Schema(implementation = MenuDTO.class)))\n  @ReadAPIResponses\n  ResponseEntity<MenuDTO> getMenu(\n      @PathVariable(name = "id") UUID id,\n      @Parameter(hidden = true) @RequestAttribute("CorrelationId") String correlationId) {\n      \n        // Code here\n             \n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(6540);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},9557:(e,n,t)=>{t.d(n,{A:()=>s});var a=t(6540),o=t(4848);const s=e=>{let{next:n,prev:t}=e;return a.useEffect((()=>{if(n){const e=document.querySelector("div.pagination-nav__item.pagination-nav__item--next>a");e&&e.style&&(e.style.display="none")}if(t){const e=document.querySelector("div.pagination-nav__item>a");e&&e.style&&(e.style.display="none")}})),(0,o.jsx)("div",{})}}}]);