"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[7389],{4774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(4848),i=t(8453);const o={},r=void 0,a={id:"getting_started/workspace/init",title:"init",description:"@ensono-stacks/workspace:init",source:"@site/docs/getting_started/workspace/init.md",sourceDirName:"getting_started/workspace",slug:"/getting_started/workspace/init",permalink:"/docs/getting_started/workspace/init",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},c={},l=[{value:"@ensono-stacks/workspace",id:"ensono-stacksworkspace",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Usage",id:"usage",level:2},{value:"Command line arguments",id:"command-line-arguments",level:3},{value:"Generator Output",id:"generator-output",level:3},{value:"Commit management",id:"commit-management",level:4},{value:"Code quality management",id:"code-quality-management",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h3,{id:"ensono-stacksworkspace",children:["@ensono-stacks/workspace",":init"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)("summary",{children:"Set up libraries to manage code & commit quality"}),"\nSet up libraries to manage code & commit quality, keeping projects consistent and will generally be useful in any workspace."]}),(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),(0,s.jsxs)(n.p,{children:["To scaffold your workspace with FE and deployment/infrastructure there is a dependency on the ",(0,s.jsx)(n.code,{children:"stacks"})," -> ",(0,s.jsx)(n.code,{children:"config"})," & ",(0,s.jsx)(n.code,{children:"executedGenerators"})," fields within ",(0,s.jsx)(n.code,{children:"nx.json"}),".\nIf you have already run the Ensono Stacks CLI these fields will be automatically populated. Alternatively, if you created your workspace with ",(0,s.jsx)(n.code,{children:"create-stacks-workspace"}),", these fields will have been populated if you passed in the relevant CLI arguments.\nIf you are Stackifying an existing Nx workspace, this must be added manually - an example ",(0,s.jsx)(n.code,{children:"stacks"})," field can be seen here:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "stacks": {\n    "config": {\n      "business": {\n        "company": "Ensono",\n        "domain": "stacks",\n        "component": "nx"\n      },\n      "domain": {\n        "internal": "test.com",\n        "external": "test.dev"\n      },\n      "cloud": {\n        "platform": "azure",\n        "region": "euw"\n      },\n      "pipeline": "azdo",\n      "terraform": {\n        "group": "terraform-group",\n        "storage": "terraform-storage",\n        "container": "terraform-container"\n      },\n      "vcs": {\n        "type": "github",\n        "url": "remote.git"\n      }\n    },\n    "executedGenerators": {\n      "project": {},\n      "workspace": []\n    }\n  }\n}\n'})}),(0,s.jsxs)(n.p,{children:["Please see the ",(0,s.jsx)(n.a,{href:"/docs/stackscli/about",children:"Ensono Stacks CLI documentation"})," for information on each of these values."]}),(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),(0,s.jsx)(n.p,{children:"Initialise your NX workspace with Ensono Stacks with the following command:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"nx g @ensono-stacks/workspace:init\n"})}),(0,s.jsx)(n.h3,{id:"command-line-arguments",children:"Command line arguments"}),(0,s.jsx)(n.p,{children:"Interactive options can instead be passed via the command line:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Option"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Accepted Values"}),(0,s.jsx)(n.th,{children:"Default"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"--husky"}),(0,s.jsx)(n.td,{children:"Install & configure husky"}),(0,s.jsx)(n.td,{children:"boolean"}),(0,s.jsx)(n.td,{children:"[true, false]"}),(0,s.jsx)(n.td,{children:"true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"--commitizen"}),(0,s.jsx)(n.td,{children:"Install & configure commitizen"}),(0,s.jsx)(n.td,{children:"boolean"}),(0,s.jsx)(n.td,{children:"[true, false]"}),(0,s.jsx)(n.td,{children:"true"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"--eslint"}),(0,s.jsx)(n.td,{children:"Install & configure eslint"}),(0,s.jsx)(n.td,{children:"boolean"}),(0,s.jsx)(n.td,{children:"[true, false]"}),(0,s.jsx)(n.td,{children:"true"})]})]})]}),(0,s.jsx)(n.h3,{id:"generator-output",children:"Generator Output"}),(0,s.jsx)(n.p,{children:"Files updated: package.json"}),(0,s.jsx)(n.p,{children:"Files created:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cs",children:"\u251c\u2500\u2500 workspace root\n\u2502   \u251c\u2500\u2500 .husky\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 commit-msg\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 pre-commit\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 prepare-commit-msg\n\u2502   \u251c\u2500\u2500 .eslintrc.json\n\u2502   \u251c\u2500\u2500 commitlint.config.js\n\u2502   \u251c\u2500\u2500 tsconfig.base.json\n"})}),(0,s.jsx)(n.h4,{id:"commit-management",children:"Commit management"}),(0,s.jsx)(n.p,{children:"Keeping commits well-structured and clear is key to enabling collaboration on a project. This generator initialises three tools to empower consistent commits:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/commitizen",children:"Commitizen"})," - Interactive tool that helps to build constructive messages on commit. The generator adds commitizen config to the package.json:"]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Commitizen config"',children:'"config": {\n    "commitizen": {\n        "path": "@commitlint/cz-commit-lint"\n    }\n  }\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://commitlint.js.org/",children:"Commitlint"})," - Standardised commit message format to make reading commit history easy. The generator installs Commitlint and uses it for commitizen config."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://typicode.github.io/husky/#/",children:"Husky"})," - Git hook management tool. The generator adds a ",(0,s.jsx)(n.code,{children:"prepare"})," script to ensure husky is always installed:"]}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="Husky install script"',children:'"scripts": {\n    "prepare": "husky install"\n  },\n'})}),(0,s.jsxs)(n.p,{children:["It also adds commitizen to the git ",(0,s.jsx)(n.code,{children:"prepare-commit-msg"})," script, and Commitlint to the ",(0,s.jsx)(n.code,{children:"commit-msg"}),". This means that you can simply run ",(0,s.jsx)(n.code,{children:"git commit"})," and get the benefits of both tools."]}),(0,s.jsx)(n.h4,{id:"code-quality-management",children:"Code quality management"}),(0,s.jsx)(n.p,{children:"Ensono Stacks projects use ESLint and Typescript to help maintain code quality. Using the same config in every Ensono Stacks project ensures consistency and allows developers to more easily onboard onto new projects."}),(0,s.jsx)(n.p,{children:"This generator creates config files for both Typescript and ESLint and installs the relevant dependencies."})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);