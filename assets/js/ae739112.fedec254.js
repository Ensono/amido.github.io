"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[4422],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||s;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1238:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=n(4996),o=["components"],l={id:"define_aws_secrets_java",title:"AWS Secrets as Spring Properties",sidebar_label:"AWS Secrets as Spring Properties",hide_title:!1,hide_table_of_contents:!1,description:"How to use AWS Secrets as properties",keywords:["aws","xray","secrets","properties","settings"]},c=void 0,p={unversionedId:"workloads/aws/backend/java/define_aws_secrets_java",id:"workloads/aws/backend/java/define_aws_secrets_java",title:"AWS Secrets as Spring Properties",description:"How to use AWS Secrets as properties",source:"@site/docs/workloads/aws/backend/java/define_aws_secrets_java.md",sourceDirName:"workloads/aws/backend/java",slug:"/workloads/aws/backend/java/define_aws_secrets_java",permalink:"/docs/workloads/aws/backend/java/define_aws_secrets_java",draft:!1,tags:[],version:"current",frontMatter:{id:"define_aws_secrets_java",title:"AWS Secrets as Spring Properties",sidebar_label:"AWS Secrets as Spring Properties",hide_title:!1,hide_table_of_contents:!1,description:"How to use AWS Secrets as properties",keywords:["aws","xray","secrets","properties","settings"]},sidebar:"docs",previous:{title:"Running the AWS XRay Daemon",permalink:"/docs/workloads/aws/backend/java/setting_up_xray_daemon_locally_java"},next:{title:"Using the Maven Scaffolding",permalink:"/docs/workloads/common/backend/java/scaffolding_java"}},d={},u=[{value:"Introduction to AWS Secret Manager",id:"introduction-to-aws-secret-manager",level:2},{value:"Usage within Stacks",id:"usage-within-stacks",level:2},{value:"Giving Spring Cloud permission to access AWS Secrets",id:"giving-spring-cloud-permission-to-access-aws-secrets",level:3},{value:"Example ~/.aws/credentials",id:"example-awscredentials",level:4},{value:"Defining Secrets in AWS Secret Manager",id:"defining-secrets-in-aws-secret-manager",level:2},{value:"Defining a Secret",id:"defining-a-secret",level:3},{value:"Defining Secret Values",id:"defining-secret-values",level:3},{value:"Using AWS Secret Property Providers",id:"using-aws-secret-property-providers",level:2},{value:"Accessing Secret Values via Property Placeholders",id:"accessing-secret-values-via-property-placeholders",level:2},{value:"Testing the Secret Properties",id:"testing-the-secret-properties",level:3},{value:"Reloading Secrets after modification",id:"reloading-secrets-after-modification",level:3}],h={toc:u},f="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)(f,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"introduction-to-aws-secret-manager"},"Introduction to AWS Secret Manager"),(0,s.kt)("p",null,"AWS Secrets Manager helps you protect secrets needed to access your applications, services, and IT resources. The service\nenables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. "),(0,s.kt)("p",null,"Users and applications retrieve secrets with a call to Secrets Manager APIs, eliminating the need to hardcode sensitive\ninformation in plain text. Secrets Manager offers secret rotation with built-in integration for Amazon Relational Database\nService (Amazon RDS), Amazon Redshift, and Amazon DocumentDB. Also, the service is extensible to other types of secrets,\nincluding API keys and OAuth tokens. In addition, Secrets Manager enables you to control access to secrets using fine-grained\npermissions and audit secret rotation centrally for resources in the AWS Cloud, third-party services, and on-premises."),(0,s.kt)("h2",{id:"usage-within-stacks"},"Usage within Stacks"),(0,s.kt)("p",null,"Support for AWS Secret Manager within Stacks is demonstrated as the provision of a number of secrets defined in AWS that are used as\nproperties within the codebase. As the purpose of this is to simply showcase functionality, the use-case is that some secrets are\ndefined in the AWS Management Console and provided to a class within the application."),(0,s.kt)("p",null,"Stacks uses Spring Cloud integration capability to allow a developer to access a secret as if it were a property defined locally.\nThis reduces the amount of coding required (for example, they don't need to access the AWS SDK directly) by allowing the developer to\nsimply specify an additional property source to their application through a series of properties in the application property files under\nresources."),(0,s.kt)("h3",{id:"giving-spring-cloud-permission-to-access-aws-secrets"},"Giving Spring Cloud permission to access AWS Secrets"),(0,s.kt)("p",null,"Spring Cloud uses the AWS SDK to access resources, and it needs AWS credentials with permission to do that."),(0,s.kt)("p",null,"On Amazon EC2, the daemon uses the instance's instance profile role automatically. Locally, save your access keys to a file\nnamed ",(0,s.kt)("inlineCode",{parentName:"p"},"credentials")," in your user directory under a folder named ",(0,s.kt)("inlineCode",{parentName:"p"},".aws"),"."),(0,s.kt)("h4",{id:"example-awscredentials"},"Example ~/.aws/credentials"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[default]\naws_access_key_id = AKIAIOSFODNN7EXAMPLE\naws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n")),(0,s.kt)("h2",{id:"defining-secrets-in-aws-secret-manager"},"Defining Secrets in AWS Secret Manager"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NOTE:")," In order to work around an outstanding issue in Spring Cloud please ensure that the ",(0,s.kt)("em",{parentName:"p"},"name of any secrets")," defined in the AWS\nManagement Console end with a trailing ",(0,s.kt)("inlineCode",{parentName:"p"},"/"),". See the screenshots below for examples."),(0,s.kt)("h3",{id:"defining-a-secret"},"Defining a Secret"),(0,s.kt)("p",null,"Ensure that the Secret Name ends with a trailing ",(0,s.kt)("inlineCode",{parentName:"p"},"/"),"."),(0,s.kt)("img",{alt:"Defining a Secret",src:(0,i.Z)("img/aws_java_secret_definition.png")}),(0,s.kt)("h3",{id:"defining-secret-values"},"Defining Secret Values"),(0,s.kt)("p",null,"Multiple secret keys and values can de defined within a single secret definition. In the example below, two are defined."),(0,s.kt)("img",{alt:"Defining Secret Values",src:(0,i.Z)("img/aws_java_secret_definition_values.png")}),(0,s.kt)("h2",{id:"using-aws-secret-property-providers"},"Using AWS Secret Property Providers"),(0,s.kt)("p",null,"Within the Stacks code, property providers can be specified within the application resource files: -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spring.config.import:\n  - optional:aws-secretsmanager:/stacks-secret/example-1/\n  - optional:aws-secretsmanager:/stacks-secret/example-2/\n")),(0,s.kt)("p",null,"Note that the name of the secrets defined in AWS from the first screenshot are referenced above. It is also possible to mark\neach property provider with the ",(0,s.kt)("inlineCode",{parentName:"p"},"optional:")," flag meaning that if the secret cannot be found then no exception will be thrown\nat startup (please adjust for your own specific use-case)."),(0,s.kt)("h2",{id:"accessing-secret-values-via-property-placeholders"},"Accessing Secret Values via Property Placeholders"),(0,s.kt)("p",null,"It is possible to enable (or disable) AWS Secrets Manager support using the following environment variable prior to starting the application: -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"export AWS_SECRETS_ENABLED=true\n")),(0,s.kt)("p",null,"Within the Java code, Spring Cloud now provides support for accessing secret values as any other property. This is through the use\nof standard Spring ",(0,s.kt)("inlineCode",{parentName:"p"},"@Value")," annotated property placeholders as follows: -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'  @Value(value = "${stacks-secret-1:secret-not-available}")\n  private String secret1;\n')),(0,s.kt)("p",null,'As with any other properties it is possible to specify a default should the secret not be defined (or inaccessible due to\ninvalid credentials) - in this example the value "secret-not-available" would be returned. '),(0,s.kt)("p",null,"If no default values is specified and then the secret is unavailable then it follows the same rules as other Spring property\nproviders in that an exception will be generated."),(0,s.kt)("h3",{id:"testing-the-secret-properties"},"Testing the Secret Properties"),(0,s.kt)("p",null,"Assuming the system has been configured properly, it should be possible to start the Stacks application and then access\nthe configured secret values using a simple cURL command via a test controller endpoint, as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:9000/v1/secrets\n\n  Secrets -> SECRET-VALUE-1, SECRET-VALUE-2, SECRET-VALUE-3, SECRET-VALUE-4\n")),(0,s.kt)("p",null,"As described above, if the values are not as seen here please check that the following are correct: -"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"AWS Credentials are correct"),(0,s.kt)("li",{parentName:"ol"},"User/Role being used has been granted permission to read AWS Secrets "),(0,s.kt)("li",{parentName:"ol"},"AWS Secret Manager for the Organisation used contains the named secrets being accessed")),(0,s.kt)("h3",{id:"reloading-secrets-after-modification"},"Reloading Secrets after modification"),(0,s.kt)("p",null,"If any of the secrets have been changed by an administrator in the AWS Secrets Manager console an already running\napplication will not see these changes unless it is restarted or refreshed. Support for online refresh is provided via\nSpring Actuator. There are two development activities to allow for this: -"),(0,s.kt)("p",null,"Add the ",(0,s.kt)("inlineCode",{parentName:"p"},"refresh")," option to the Actuator management preferences: -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"management:\n  endpoints:\n    web:\n      base-path: /\n      exposure:\n        include: health, info, beans, refresh\n")),(0,s.kt)("p",null,"and to annotate any Spring Beans that read properties with the ",(0,s.kt)("inlineCode",{parentName:"p"},"@RefreshScope")," annotation: -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"@Service\n@RefreshScope\npublic class SecretsService { ... }\n")),(0,s.kt)("p",null,"It is then possible to ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," a request to the actuator endpoint to request a refresh: -"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X POST http://localhost:9000/refresh\n\n[stacks-secret-1,stacks-secret-2]\n")),(0,s.kt)("p",null,"Any property values that were detected as having changed are returned as an array in the response."))}g.isMDXComponent=!0}}]);