"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[2764],{31:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"workloads/azure/data/getting_started/ingest_pipeline_deployment_azure","title":"Data Ingest Pipeline Deployment","description":"Data ingest pipelines development & deployment","source":"@site/docs/workloads/azure/data/getting_started/ingest_pipeline_deployment_azure.md","sourceDirName":"workloads/azure/data/getting_started","slug":"/workloads/azure/data/getting_started/ingest_pipeline_deployment_azure","permalink":"/docs/workloads/azure/data/getting_started/ingest_pipeline_deployment_azure","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"ingest_pipeline_deployment_azure","title":"Data Ingest Pipeline Deployment","sidebar_label":"6. Data Ingest Pipeline Deployment","hide_title":false,"hide_table_of_contents":false,"description":"Data ingest pipelines development & deployment","keywords":["datastacks","data","python","etl","cli","azure","template"]},"sidebar":"docs","previous":{"title":"5. Example Data Source","permalink":"/docs/workloads/azure/data/getting_started/example_data_source"},"next":{"title":"7. Data Processing Pipeline Deployment","permalink":"/docs/workloads/azure/data/getting_started/processing_pipeline_deployment_azure"}}');var i=t(4848),s=t(8453);const r={id:"ingest_pipeline_deployment_azure",title:"Data Ingest Pipeline Deployment",sidebar_label:"6. Data Ingest Pipeline Deployment",hide_title:!1,hide_table_of_contents:!1,description:"Data ingest pipelines development & deployment",keywords:["datastacks","data","python","etl","cli","azure","template"]},o=void 0,d={},l=[{value:"Data source pre-requisites",id:"data-source-pre-requisites",level:2},{value:"Azure DevOps variable",id:"azure-devops-variable",level:3},{value:"Key Vault secret",id:"key-vault-secret",level:3},{value:"Step 1: Create feature branch",id:"step-1-create-feature-branch",level:2},{value:"Step 2: Prepare the Datastacks config file",id:"step-2-prepare-the-datastacks-config-file",level:2},{value:"Step 3: Generate project artifacts using Datastacks",id:"step-3-generate-project-artifacts-using-datastacks",level:2},{value:"Step 4: Update ingest configuration",id:"step-4-update-ingest-configuration",level:2},{value:"Step 5: Update end-to-end tests",id:"step-5-update-end-to-end-tests",level:2},{value:"Step 6: Deploy new workload in non-production environment",id:"step-6-deploy-new-workload-in-non-production-environment",level:2},{value:"Step 7: Review deployed resources",id:"step-7-review-deployed-resources",level:2},{value:"Step 8: Deploy new workload in further environments",id:"step-8-deploy-new-workload-in-further-environments",level:2},{value:"Next steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This section provides an overview of generating a new ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/ingest_data_azure",children:"data ingest pipeline"})," workload and deploying it into a Ensono Stacks Data Platform, using the ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/datastacks",children:"Datastacks CLI"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This guide assumes the following are in place:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/getting_started/core_data_platform_deployment_azure",children:"deployed Ensono Stacks Data Platform"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/getting_started/dev_quickstart_data_azure",children:"Development environment set up"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/getting_started/shared_resources_deployment_azure",children:"Deployed shared resources"})}),"\n",(0,i.jsxs)(n.li,{children:["A data source to ingest from. The steps below are based on using the ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/getting_started/example_data_source",children:"Azure SQL example data source"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This process will deploy the following resources into the project:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Azure Data Factory resources (defined in Terraform / ARM)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Linked service"}),"\n",(0,i.jsx)(n.li,{children:"Dataset"}),"\n",(0,i.jsx)(n.li,{children:"Pipeline"}),"\n",(0,i.jsx)(n.li,{children:"Trigger"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Data ingest config files (JSON)"}),"\n",(0,i.jsx)(n.li,{children:"Azure DevOps CI/CD pipeline (YAML)"}),"\n",(0,i.jsx)(n.li,{children:"(optional) Spark job and config file for data quality tests (Python)"}),"\n",(0,i.jsx)(n.li,{children:"Template unit tests (Python)"}),"\n",(0,i.jsx)(n.li,{children:"Template end-to-end tests (Python, Behave)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-source-pre-requisites",children:"Data source pre-requisites"}),"\n",(0,i.jsx)(n.p,{children:"Details required for connecting to the data source will need to be stored securely (i.e. not in the source code) and to be referenced dynamically by the deployment pipeline. This approach also allows for different versions of the data source to be used in different environments (for example non-prod / prod versions). The examples below require the following details to be set for the Azure SQL sample database in each environment:"}),"\n",(0,i.jsx)(n.h3,{id:"azure-devops-variable",children:"Azure DevOps variable"}),"\n",(0,i.jsx)(n.p,{children:"Azure DevOps variables will be accessed dynamically during deployments so is used for details needed to create the linked service in Data Factory."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sql_connection"}),": connection string for the database, for example ",(0,i.jsx)(n.code,{children:"Data Source=amidostacksdeveuwdesql.database.windows.net;Initial Catalog=exampledb;User ID=user;Integrated Security=False;Encrypt=True;Connection Timeout=30;"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-vault-secret",children:"Key Vault secret"}),"\n",(0,i.jsx)(n.p,{children:"The password will need to be accessed dynamically by Data Factory on each connection, therefore should be stored in the Key Vault linked to the factory."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sql-password"}),": password to use with the connection string"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-create-feature-branch",children:"Step 1: Create feature branch"}),"\n",(0,i.jsx)(n.p,{children:"Before creating a new workload using Datastacks, open the project locally and create a new branch for the workload being created, e.g.:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git checkout -b feat/my-new-ingest-pipeline\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-prepare-the-datastacks-config-file",children:"Step 2: Prepare the Datastacks config file"}),"\n",(0,i.jsxs)(n.p,{children:["Datastacks requires a YAML config file for generating a new ingest workload - see ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/datastacks#configuration",children:"Datastacks configuration"})," for further details."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a new YAML file and populate the values relevant to your new ingest pipeline. The example below will create an ingest workload named ",(0,i.jsx)(n.strong,{children:"Ingest_AzureSql_MyNewExample"}),", and connect using the data source connection details as specified in ",(0,i.jsx)(n.a,{href:"#data-source-pre-requisites",children:"Data source pre-requisites"})," above."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'#######################\n# Required parameters #\n#######################\n\n# Data pipeline configurations\ndataset_name: AzureSql_MyNewExample\npipeline_description: "Ingest from demo Azure SQL database using ingest config file."\ndata_source_type: azure_sql\ndata_source_password_key_vault_secret_name: sql-password\ndata_source_connection_string_variable_name: sql_connection\n\n# Azure DevOps configurations\nado_variable_groups_nonprod:\n  - amido-stacks-de-pipeline-nonprod\n  - stacks-credentials-nonprod-kv\n\nado_variable_groups_prod:\n  - amido-stacks-de-pipeline-prod\n  - stacks-credentials-prod-kv\n\n#######################\n# Optional parameters #\n#######################\n\n# Workload config\nwindow_start_default: 2010-01-01\nwindow_end_default: 2010-01-31\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-generate-project-artifacts-using-datastacks",children:"Step 3: Generate project artifacts using Datastacks"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/datastacks#using-the-datastacks-cli",children:"Datastacks CLI"})," to generate the artifacts for the new workload, using the prepared config file (replacing ",(0,i.jsx)(n.code,{children:"path_to_config_file/my_config.yaml"})," with the appropriate path).:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Activate virtual environment\npoetry shell\n\n# Generate resources for an ingest pipeline (without data quality steps)\ndatastacks generate ingest --config="path_to_config_file/my_config.yaml"\n\n# Generate resources for an ingest pipeline (with added data quality steps)\ndatastacks generate ingest --config="path_to_config_file/my_config.yaml" --data-quality\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will add new project artifacts for the workload under ",(0,i.jsx)(n.code,{children:"de_workloads/ingest/Ingest_AzureSql_MyNewExample"}),", based on the ingest workload templates. Review the resources that have been generated."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The default ingest workload generated by Datastacks is based upon ingesting from an Azure SQL data source. For the purposes of the ",(0,i.jsx)(n.em,{children:"getting started"})," example to you can leave the resources generated as they are. See ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/ingest_data_azure#data-source-types",children:"ingest data source types"})," for further information on adapting the workload for other data source types."]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["The default ingest workload contains an example ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/ingest_data_azure#data-factory-triggers",children:"tumbling window trigger"}),", which defaults to a 'Stopped' state. This is defined in the Terraform resource in ",(0,i.jsx)(n.code,{children:"data_factory/adf_triggers/tf"}),", and can be modified based on your requirements."]})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-update-ingest-configuration",children:"Step 4: Update ingest configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Configuration of the data that the workload will ingest from the source is specified in the file in the workload's ",(0,i.jsx)(n.code,{children:"config/ingest_sources/ingest_config.json"})," file - see ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/ingest_data_azure#configuration",children:"data ingest configuration"})," for further details on this file. For the example data source, update the contents of the file with the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "data_source_name": "Ingest_AzureSql_MyNewExample",\n    "data_source_type": "azure_sql",\n    "enabled": true,\n    "ingest_entities": [\n        {\n            "version": 1,\n            "display_name": "movies.movies_metadata",\n            "enabled": true,\n            "schema": "movies",\n            "table": "movies_metadata",\n            "columns": "[adult], [belongs_to_collection], [budget], [genres], [homepage], [id], [imdb_id], [original_language], [original_title], [overview], [popularity], [poster_path], [production_companies], [production_countries], [release_date], [revenue], [runtime], [spoken_languages], [status], [tagline], [title], [video], [vote_average], [vote_count]",\n            "load_type": "full",\n            "delta_date_column": null,\n            "delta_upsert_key": null\n        },\n        {\n            "version": 1,\n            "display_name": "movies.ratings_small",\n            "enabled": true,\n            "schema": "movies",\n            "table": "ratings_small",\n            "columns": "[userId], [movieId], [rating], [timestamp]",\n            "load_type": "full",\n            "delta_date_column": null,\n            "delta_upsert_key": null\n        },\n        {\n            "version": 1,\n            "display_name": "movies.keywords",\n            "enabled": true,\n            "schema": "movies",\n            "table": "keywords",\n            "columns": "[id], [keywords]",\n            "load_type": "full",\n            "delta_date_column": null,\n            "delta_upsert_key": null\n        },\n        {\n            "version": 1,\n            "display_name": "movies.links",\n            "enabled": true,\n            "schema": "movies",\n            "table": "links",\n            "columns": "[movieId], [imdbId], [tmdbId]",\n            "load_type": "full",\n            "delta_date_column": null,\n            "delta_upsert_key": null\n        }\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-5-update-end-to-end-tests",children:"Step 5: Update end-to-end tests"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/testing_data_azure#end-to-end-tests",children:"end-to-end tests"})," are designed to run the ingest pipeline in a controlled fashion to ensure it functions as expected. Open the test feature file for the workload (",(0,i.jsx)(n.code,{children:"tests/end_to_end/features/azure_data_ingest.feature"}),") and update the parameters to reflect the data entities expected to be ingested. In our example, we will use the entities specified in the config file above, i.e.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gherkin",children:'|{"window_start" : "2010-01-01", "window_end": "2010-01-31"}|["movies.keywords", "movies.links", "movies.movies_metadata", "movies.ratings_small"]|\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-6-deploy-new-workload-in-non-production-environment",children:"Step 6: Deploy new workload in non-production environment"}),"\n",(0,i.jsxs)(n.p,{children:["The generated workload contains a YAML file containing a template Azure DevOps CI/CD pipeline for the workload, named ",(0,i.jsx)(n.code,{children:"de-ingest-ado-pipeline.yaml"}),". This should be added as the definition for a new pipeline in Azure DevOps."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Sign-in to your Azure DevOps organization and go to your project."}),"\n",(0,i.jsx)(n.li,{children:"Go to Pipelines, and then select New pipeline."}),"\n",(0,i.jsxs)(n.li,{children:["Name the new pipeline to match the name of your new workload, e.g. ",(0,i.jsx)(n.code,{children:"de-ingest-azuresql-mynewexample"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["For the pipeline definition, specify the YAML file in the project repository feature branch (e.g. ",(0,i.jsx)(n.code,{children:"de-ingest-ado-pipeline.yaml"}),") and save."]}),"\n",(0,i.jsxs)(n.li,{children:["The new pipeline will require access to any Azure DevOps pipeline variable groups specified in the ",(0,i.jsx)(n.a,{href:"#step-2-prepare-the-datastacks-config-file",children:"datastacks config file"}),". Under each variable group, go to 'Pipeline permissions' and add the new pipeline."]}),"\n",(0,i.jsx)(n.li,{children:"Run the new pipeline."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Running this pipeline in Azure DevOps will deploy the artifacts into the non-production (nonprod) environment and run tests. If successful, the generated resources will now be available in the nonprod Ensono Stacks environment."}),"\n",(0,i.jsx)(n.h2,{id:"step-7-review-deployed-resources",children:"Step 7: Review deployed resources"}),"\n",(0,i.jsxs)(n.p,{children:["If successful, the new resources will now be deployed into the non-production resource group in Azure - these can be viewed through the ",(0,i.jsx)(n.a,{href:"https://portal.azure.com/#home",children:"Azure Portal"})," or CLI."]}),"\n",(0,i.jsxs)(n.p,{children:["The Azure Data Factory resources can be viewed through the ",(0,i.jsx)(n.a,{href:"https://adf.azure.com/",children:"Data Factory UI"}),". You may also wish to run/debug the newly generated pipeline from here (see ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/data-factory/iterative-development-debugging",children:"Microsoft documentation"}),")."]}),"\n",(0,i.jsx)(n.admonition,{title:"Updating Data Factory resources",type:"note",children:(0,i.jsxs)(n.p,{children:["The structure of the data platform and Data Factory resources are defined in the project's code repository, and deployed through the Azure DevOps pipelines. Changes to Data Factory resources directly through the UI will lead to them being overwritten when deployment pipelines are next run. See ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/getting_started/dev_quickstart_data_azure#azure-data-factory-development",children:"Data Factory development quickstart"})," for further information on updating Data Factory resources."]})}),"\n",(0,i.jsxs)(n.p,{children:["Continue to make any further amendments required to the new workload, re-running the DevOps pipeline as required. If including data quality checks, update the (",(0,i.jsx)(n.code,{children:"ingest_dq"}),") file in the repository with details of checks required on the data (see ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/data_engineering/data_quality_azure#json-configuration-file-for-great-expectations",children:"data quality configuration"})," for further details)."]}),"\n",(0,i.jsx)(n.h2,{id:"step-8-deploy-new-workload-in-further-environments",children:"Step 8: Deploy new workload in further environments"}),"\n",(0,i.jsx)(n.p,{children:"In the example pipeline templates:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Deployment to the non-production (nonprod) environment is triggered on a feature branch when a pull request is open"}),"\n",(0,i.jsxs)(n.li,{children:["Deployment to the production (prod) environment is triggered on merging to the ",(0,i.jsx)(n.code,{children:"main"})," branch, followed by manual approval of the release step."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"It is recommended in any data platform that processes for deploying and releasing across environments should be agreed and documented, ensuring sufficient review and quality assurance of any new workloads. The template CI/CD pipelines provided are based upon two platform environments (nonprod and prod) - but these may be amended depending upon the specific requirements of your project and organisation."})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(n.p,{children:["Now you have ingested some data into the bronze data lake layer, you can generate a ",(0,i.jsx)(n.a,{href:"/docs/workloads/azure/data/getting_started/processing_pipeline_deployment_azure",children:"data processing pipeline"})," to transform and model the data."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);