"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[2160],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,d=g["".concat(o,".").concat(m)]||g[m]||c[m]||l;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[g]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4102:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return g}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],s={},o=void 0,p={unversionedId:"getting_started/playwright/visual-regression-deployment",id:"getting_started/playwright/visual-regression-deployment",title:"visual-regression-deployment",description:"@ensono-stacks/playwright:visual-regression-deployment",source:"@site/docs/getting_started/playwright/visual-regression-deployment.md",sourceDirName:"getting_started/playwright",slug:"/getting_started/playwright/visual-regression-deployment",permalink:"/docs/getting_started/playwright/visual-regression-deployment",draft:!1,tags:[],version:"current",frontMatter:{}},u={},g=[{value:"@ensono-stacks/playwright:visual-regression-deployment",id:"ensono-stacksplaywrightvisual-regression-deployment",level:3},{value:"Usage",id:"usage",level:2},{value:"Command line arguments",id:"command-line-arguments",level:3},{value:"Generator Output",id:"generator-output",level:3},{value:"Playwright with native visual comparisons",id:"playwright-with-native-visual-comparisons",level:4},{value:"Playwright with Applitools Eyes",id:"playwright-with-applitools-eyes",level:4}],c={toc:g},m="wrapper";function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"ensono-stacksplaywrightvisual-regression-deployment"},"@ensono-stacks/playwright:visual-regression-deployment"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Configure visual regression testing within your deployment pipeline"),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"visual-regression-deployment")," generator configures your pipeline to enable visual regression testing either natively, or through a cloud based provider."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nx g @ensono-stacks/playwright:visual-regression-deployment\n")),(0,l.kt)("p",null,"Upon calling the ",(0,l.kt)("em",{parentName:"p"},"visual-regression-deployment")," generator you will be presented with a number of options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"What type of visual regression tests would you like to use?",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"native"),(0,l.kt)("li",{parentName:"ul"},"applitools")))),(0,l.kt)("p",null,"You should select the type of visual regression tests which you created through the ",(0,l.kt)("a",{parentName:"p",href:"/docs/getting_started/playwright/ensono-stacks-playwright#ensono-stacksplaywrightvisual-regression"},"@ensono-stacks/playwright:visual-regression")," generator."),(0,l.kt)("h3",{id:"command-line-arguments"},"Command line arguments"),(0,l.kt)("p",null,"The following command line arguments are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Accepted Values"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--type, -t"),(0,l.kt)("td",{parentName:"tr",align:null},"Method used to conduct visual testing"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'[choices: "native", "applitools"]'),(0,l.kt)("td",{parentName:"tr",align:null},"none")))),(0,l.kt)("h3",{id:"generator-output"},"Generator Output"),(0,l.kt)("h4",{id:"playwright-with-native-visual-comparisons"},"Playwright with native visual comparisons"),(0,l.kt)("p",null,"Opting to scaffold ",(0,l.kt)("strong",{parentName:"p"},"native")," visual testing will make a number of amendments to your test projects configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Generated files"',title:'"Generated','files"':!0},".\n\u251c\u2500\u2500 build\n\u2502   \u251c\u2500\u2500 azDevOps\n\u2502   \u2502   \u251c\u2500\u2500 azuredevops-updatesnapshots.yaml #Pipeline to capture and update baseline images within the CI\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="build/taskctl/tasks.yaml"',title:'"build/taskctl/tasks.yaml"'},'# New update snapshots task definition to update snapshots for all affected projects\ne2e:updatesnapshots:\n    description: Run e2e snapshot updates in ci\n    command:\n      - npx nx affected --base="$BASE_SHA" --target=e2e --parallel=1\n        --skip-nx-cache --update-snapshots --grep @visual-regression\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="taskctl.yaml"',title:'"taskctl.yaml"'},"# Update snapshots task added to taskctl.yaml which can be called by adding a comment to pull requests\nupdatesnapshots:\n    - task: e2e:updatesnapshots\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Visit the ",(0,l.kt)("a",{parentName:"p",href:"../../testing/testing_in_nx/playwright_visual_testing#updating-your-baseline-images"},"Updating your baseline images\u200b")," documentation for further details!")),(0,l.kt)("h4",{id:"playwright-with-applitools-eyes"},"Playwright with Applitools Eyes"),(0,l.kt)("p",null,"Opting to scaffold visual testing with ",(0,l.kt)("strong",{parentName:"p"},"applitools")," will make a small change your test projects configuration:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="build/azDevOps/azuredevops-stages.yaml"',title:'"build/azDevOps/azuredevops-stages.yaml"'},"- task: AzureCLI@2\n    displayName: build_deployment_${{ parameters.environment }}\n        env:\n            GH_TOKEN: $(GH_TOKEN)\n            APPLITOOLS_API_KEY: $(APPLITOOLS_API_KEY) # API key for applitools api added\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Visit the ",(0,l.kt)("a",{parentName:"p",href:"/docs/testing/testing_in_nx/playwright_visual_testing_applitools_eyes"},(0,l.kt)("inlineCode",{parentName:"a"},"Playwright with Applitools Eyes"))," documentation for further details!"))))}d.isMDXComponent=!0}}]);