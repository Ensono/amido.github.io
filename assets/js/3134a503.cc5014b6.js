"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[2323],{4071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore","title":"Operations, Events, Exceptions and Correlation","description":".NET Core REST API application - Operations, Events, Exceptions and Correlation","source":"@site/docs/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore.md","sourceDirName":"workloads/azure/backend/netcore/architecture","slug":"/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore","permalink":"/docs/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"operations_events_exceptions_correlation_netcore","title":"Operations, Events, Exceptions and Correlation","sidebar_label":"Operations, Events, Exceptions and Correlation","hide_title":false,"hide_table_of_contents":false,"description":".NET Core REST API application - Operations, Events, Exceptions and Correlation","keywords":[".net core","rest api","cqrs","example","template","repository","structure","operations","events","exceptions","correlation"]},"sidebar":"docs","previous":{"title":"Data Storage - CosmosDB","permalink":"/docs/workloads/azure/backend/netcore/architecture/data_storage_cosmosdb_netcore"},"next":{"title":"Swagger","permalink":"/docs/workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore"}}');var o=n(4848),s=n(8453);const r={id:"operations_events_exceptions_correlation_netcore",title:"Operations, Events, Exceptions and Correlation",sidebar_label:"Operations, Events, Exceptions and Correlation",hide_title:!1,hide_table_of_contents:!1,description:".NET Core REST API application - Operations, Events, Exceptions and Correlation",keywords:[".net core","rest api","cqrs","example","template","repository","structure","operations","events","exceptions","correlation"]},a=void 0,c={},d=[{value:"Triggers",id:"triggers",level:3},{value:"Operations",id:"operations",level:3},{value:"Operation Types",id:"operation-types",level:4},{value:"Commands",id:"commands",level:5},{value:"Queries",id:"queries",level:5},{value:"Events",id:"events",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Correlation",id:"correlation",level:3},{value:"OperationCode",id:"operationcode",level:3},{value:"Unique Ids and Codes (exceptions, events, and operations codes)",id:"unique-ids-and-codes-exceptions-events-and-operations-codes",level:3}];function l(e){const t={admonition:"admonition",code:"code",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This document clarifies concepts implemented in the platform to facilitate the monitoring and management of services deployed to the platform. The platform provides monitoring data via logs and metrics to the monitoring tools and requires a consistent approach across services to simplify building dashboards, report generation, and alerts configuration."}),"\n",(0,o.jsx)(t.p,{children:"Having a clear understanding of these concepts is crucial to make the platform consistent and simple for maintenance purposes."}),"\n",(0,o.jsx)(t.h3,{id:"triggers",children:"Triggers"}),"\n",(0,o.jsx)(t.p,{children:"A trigger mechanism initiates an operation. The trigger is the event received from external systems or triggered internally to notify that something has happened or is about to happen."}),"\n",(0,o.jsx)(t.p,{children:"Common triggers include:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"HTTP Request:"})," An HTTP request to a RESTful API endpoint initiates an operation."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Queue or Topic Message:"})," A message received from a queue or topic, in the form of a command or event, triggers some processing within the application."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Scheduled Job:"})," A standalone application or function executes on a defined schedule to perform a task and is considered complete when the operation finishes."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"operations",children:"Operations"}),"\n",(0,o.jsx)(t.p,{children:"Everything that happens within an application occurs in the context of an operation. An operation starts in response to a trigger, executes, and notifies its completion with an event (and a response in the case of a synchronous operation)."}),"\n",(0,o.jsx)(t.h4,{id:"operation-types",children:"Operation Types"}),"\n",(0,o.jsx)(t.h5,{id:"commands",children:"Commands"}),"\n",(0,o.jsx)(t.p,{children:"An operation that modifies one or multiple resources in the application. Commands can be synchronous and may return a result (if required) to the caller in the form of a response, or asynchronous without a return result. The outcome of the asynchronous command should always be published as an event for any outcome (successful or failed results)."}),"\n",(0,o.jsx)(t.h5,{id:"queries",children:"Queries"}),"\n",(0,o.jsx)(t.p,{children:"Operations that do not modify the resources in the application. They intend to retrieve data from the application but should also raise events to generate insights into user behavior for platform improvement."}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Example:"}),"\nHow many times the user uses a feature (search invoice, page search results, etc.). Queries will probably also generate data in the form of exceptions when the user does not have permission to execute operations, for security, auditing, and monitoring purposes."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"All Commands and Queries must raise events to generate enough data for observability and behavior analysis by the data platform team."})}),"\n",(0,o.jsx)(t.h3,{id:"events",children:"Events"}),"\n",(0,o.jsx)(t.p,{children:"Application events are generated by the application to notify external services that an action has taken place. The event will notify if an operation completed successfully or failed and should contain the required context information to identify the resource changed (if any), the operation which raised the event, and possibly the user ID who requested it."}),"\n",(0,o.jsx)(t.h3,{id:"exceptions",children:"Exceptions"}),"\n",(0,o.jsx)(t.p,{children:"Exceptions interrupt the current processing flow either because the application or one of its dependent components behaved unexpectedly and can't proceed, or the application logic is aware it can't proceed because doing so may cause issues. All exceptions raised in an application or its dependencies are logged by the infrastructure components, so adding log information to notify an exception has happened is not required and will make the logging redundant."}),"\n",(0,o.jsx)(t.p,{children:"Exceptions raised by the application must be specific and uniquely identifiable across the platform and must clearly describe the problem that caused the exception. Generic exceptions should be avoided because they will make it difficult to implement proper exception handling logic in the application and to aggregate recurrent exceptions in the logging platform. Having unique exceptions will facilitate aggregating common issues for monitoring and alerting."}),"\n",(0,o.jsx)(t.p,{children:"Exception types can be classified as Application, Infrastructure, or Base Class Library (BCL)."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Application:"})," Exceptions raised by the application to interrupt an operation if the state of a resource or the user permissions are not valid to complete the operation. These are commonly mapped to business requirements implemented as code into the application logic."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Infrastructure:"})," Exceptions raised by base packages used to support the application. They provide useful information to the application to handle issues that it can't handle by itself. These exceptions are generally related to data access problems, messaging, and communication issues implemented into these base packages. The application can either handle these exceptions and provide a custom exception specific to the application or let the infrastructure exception propagate and provide the user with a generic error message."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Base Class Library (BCL):"})," Base exceptions raised by the .NET framework are commonly propagated to the application code to notify unexpected execution of some base class library code, like failure to convert type, invalid operations, etc. These exceptions should generally be handled properly in the application to prevent propagation to the user, providing them with more useful information."]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"correlation",children:"Correlation"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Definition:"})," A unique identifier used to track a triggered operation and its chain of events and exceptions."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Usage:"})," Every operation triggered by an event needs to be identified individually. To make this possible, we assign a CorrelationId to the operation. This allows us to identify the chain of events and exceptions triggered by these events using each CorrelationId."]}),"\n",(0,o.jsx)(t.p,{children:"CorrelationId can be used for the entire flow of a process or split into CorrelationId per stage."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example:"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"CreateOrder"})," operation is triggered by the customer at checkout of an e-commerce, raising the ",(0,o.jsx)(t.code,{children:"OrderCreated"})," event."]}),"\n",(0,o.jsxs)(t.li,{children:["The Stock application gets the event raised by the checkout application and triggers the ",(0,o.jsx)(t.code,{children:"ReserveStock"})," command."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In both cases, a single trigger raised two operations as part of a workflow. Using a single correlation in both phases of this workflow makes it easier to track all events in a chain of events across different systems. However, this approach makes all events have the same CorrelationId, which might get very bloated in a verbose system. Other scenarios include:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"The correlationId is provided by the client that didn't get a response on time and timed out, retrying the request using the same CorrelationId."}),"\n",(0,o.jsx)(t.li,{children:"An event might be processed by multiple handlers at the same time, creating a chain of events interlaced by different handlers."}),"\n",(0,o.jsx)(t.li,{children:"The handling of the message can't complete because of the state of the application, connectivity, or other issues, re-attempting to process the event using the same CorrelationId."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In these scenarios, it would be useful to generate one CorrelationId per phase."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example:"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"CreateOrder"})," generates a CorrelationId and passes it to the event raised."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"ReserveStock"})," captures the original event CorrelationId and logs the transition between the old and new before handling the event with a new correlation."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The current sample solution implements one CorrelationId for the entire flow. It is up to the implementer to decide how they want to track the correlation between services."}),"\n",(0,o.jsx)(t.h3,{id:"operationcode",children:"OperationCode"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Definition:"})," A unique code used to track an operation type."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Usage:"})," Every operation has a type."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Example:"})," Create Item, Delete Item, Update Item, Query for Items, etc. Each of these types will be given a code that will be used by the logging handler to record the chain of events, exceptions, or other information generated by an operation. The code is useful to decouple the operation name from other resources."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Example:"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"UpdateItem"})," command can raise the ",(0,o.jsx)(t.code,{children:"ItemUpdated"})," event when succeeded. If the item does not exist, an ",(0,o.jsx)(t.code,{children:"ItemDoesNotExistException"})," is raised."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.code,{children:"ReserveItem"})," command can raise the ",(0,o.jsx)(t.code,{children:"ItemUpdated"})," and ",(0,o.jsx)(t.code,{children:"ItemSoldOut"})," events when succeeded. If the item does not exist, an ",(0,o.jsx)(t.code,{children:"ItemDoesNotExistException"})," is raised."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"In both cases, the same application events and exceptions can be raised, but both are part of different contexts, one is updating the item directly and the other indirectly."}),"\n",(0,o.jsx)(t.p,{children:"Adding the OperationCode to these events makes it easier to:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Identify the context of an event or exception."}),"\n",(0,o.jsx)(t.li,{children:"Group and track events or exceptions generally raised by one operation type."}),"\n",(0,o.jsx)(t.li,{children:"Prevent operations with the same name in different contexts from being considered the same."}),"\n",(0,o.jsx)(t.li,{children:"Simplify the tracking of existing operations by having a centralized list of operation codes."}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"unique-ids-and-codes-exceptions-events-and-operations-codes",children:"Unique Ids and Codes (exceptions, events, and operations codes)"}),"\n",(0,o.jsx)(t.p,{children:"As described above, an application will create or handle operations, events, and exceptions that will generate log entries in the logging platform. These log entries will be used to generate reports and alerts. To do so, they must be uniquely identifiable or easily aggregated to produce useful reports."}),"\n",(0,o.jsxs)(t.p,{children:["Exceptions, events, and possibly operations names might conflict with names defined in different domains (e.g., ",(0,o.jsx)(t.code,{children:"AddAttachment"})," command, ",(0,o.jsx)(t.code,{children:"AttachmentAdded"})," event). Using the fully qualified name with a namespace would be a simple way to differentiate each domain-related activity. However, in some cases, like base packages shared by multiple services, exceptions or events might have the same namespaces, making it difficult to track their relationships."]}),"\n",(0,o.jsx)(t.p,{children:"Another scenario is linking exceptions and events to operations that triggered them. We could correlate them by the correlation id and track the operation that started the operation. Another alternative is to annotate the logs with the operation name."}),"\n",(0,o.jsx)(t.p,{children:"To simplify these complexities, we will add unique ids and codes to exceptions, events, and operations to uniquely identify them. These ids will be attached to all log entries to:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Link events and exceptions to operations that triggered them, simplifying reporting, monitoring, and alerting processes."}),"\n",(0,o.jsx)(t.li,{children:"Reduce the size of log entries from a long name to an integer."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);