"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[1194],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294),o=n(6010),r={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return x}});var a=n(7462),o=n(7294),r=n(6010),i=n(2466),l=n(6550),s=n(1980),u=n(7392),c=n(12);function p(e){return function(e){var t,n;return null!=(t=null==(n=o.Children.map(e,(function(e){if(!e||(0,o.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,n=e.children;return(0,o.useMemo)((function(){var e=null!=t?t:p(n);return function(e){var t=(0,u.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function h(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,r=(0,l.k6)(),i=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,s._X)(i),(0,o.useCallback)((function(e){if(i){var t=new URLSearchParams(r.location.search);t.set(i,e),r.replace(Object.assign({},r.location,{search:t.toString()}))}}),[i,r])]}function g(e){var t,n,a,r,i=e.defaultValue,l=e.queryString,s=void 0!==l&&l,u=e.groupId,p=d(e),g=(0,o.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var o=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:i,tabValues:p})})),f=g[0],k=g[1],v=h({queryString:s,groupId:u}),b=v[0],S=v[1],x=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),n=(0,c.Nk)(t),a=n[0],r=n[1],[a,(0,o.useCallback)((function(e){t&&r.set(e)}),[t,r])]),N=x[0],y=x[1],C=function(){var e=null!=b?b:N;return m({value:e,tabValues:p})?e:null}();return(0,o.useLayoutEffect)((function(){C&&k(C)}),[C]),{selectedValue:f,selectValue:(0,o.useCallback)((function(e){if(!m({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);k(e),S(e),y(e)}),[S,y,p]),tabValues:p}}var f=n(2389),k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){var t=e.className,n=e.block,l=e.selectedValue,s=e.selectValue,u=e.tabValues,c=[],p=(0,i.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),s(a))},m=function(e){var t,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,o=c.indexOf(e.currentTarget)+1;n=null!=(a=c[o])?a:c[0];break;case"ArrowLeft":var r,i=c.indexOf(e.currentTarget)-1;n=null!=(r=c[i])?r:c[c.length-1]}null==(t=n)||t.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},u.map((function(e){var t=e.value,n=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return c.push(e)},onKeyDown:m,onClick:d},i,{className:(0,r.Z)("tabs__item",k.tabItem,null==i?void 0:i.className,{"tabs__item--active":l===t})}),null!=n?n:t)})))}function b(e){var t=e.lazy,n=e.children,a=e.selectedValue,r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var i=r.find((function(e){return e.props.value===a}));return i?(0,o.cloneElement)(i,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function S(e){var t=g(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",k.tabList)},o.createElement(v,(0,a.Z)({},e,t)),o.createElement(b,(0,a.Z)({},e,t)))}function x(e){var t=(0,f.Z)();return o.createElement(S,(0,a.Z)({key:String(t)},e))}},3463:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=n(4866),l=n(5162),s=["components"],u={id:"configure_project_netcore",title:"Configure REST API with CQRS project",hide_title:!0,sidebar_label:"Configure REST API with CQRS project",hide_table_of_contents:!0,description:"Configure, Build and run .NET Core REST API application with CQRS on local and docker container",keywords:[".net core","rest api","cqrs","azure","application insights","cosmos db","aws sns","build","run","application","configure","docker"]},c=void 0,p={unversionedId:"workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore",id:"workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore",title:"Configure REST API with CQRS project",description:"Configure, Build and run .NET Core REST API application with CQRS on local and docker container",source:"@site/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore.md",sourceDirName:"workloads/azure/backend/netcore/quickstart/web_api_cqrs",slug:"/workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore",permalink:"/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore",draft:!1,tags:[],version:"current",frontMatter:{id:"configure_project_netcore",title:"Configure REST API with CQRS project",hide_title:!0,sidebar_label:"Configure REST API with CQRS project",hide_table_of_contents:!0,description:"Configure, Build and run .NET Core REST API application with CQRS on local and docker container",keywords:[".net core","rest api","cqrs","azure","application insights","cosmos db","aws sns","build","run","application","configure","docker"]},sidebar:"docs",previous:{title:"Create REST API with CQRS project",permalink:"/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/create_project_netcore"},next:{title:"Build & Run REST API with CQRS",permalink:"/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/build_and_run_project_netcore"}},d={},m=[{value:"Configuring the project",id:"configuring-the-project",level:2},{value:"Configuring Cosmos DB",id:"configuring-cosmos-db",level:3},{value:"Using Powershell for COSMOSDB_KEY",id:"using-powershell-for-cosmosdb_key",level:2},{value:"Using Visual Studio for COSMOSDB_KEY",id:"using-visual-studio-for-cosmosdb_key",level:2},{value:"Using VSCode for COSMOSDB_KEY",id:"using-vscode-for-cosmosdb_key",level:2},{value:"Using terminal for COSMOSDB_KEY",id:"using-terminal-for-cosmosdb_key",level:2},{value:"Using Visual Studio Code for COSMOSDB_KEY",id:"using-visual-studio-code-for-cosmosdb_key",level:2},{value:"Configuring DynamoDB",id:"configuring-dynamodb",level:3},{value:"Ensono.Stacks.DynamoDB package",id:"ensonostacksdynamodb-package",level:3},{value:"Configuring AWS SNS",id:"configuring-aws-sns",level:3},{value:"Using Powershell for TOPIC_ARN",id:"using-powershell-for-topic_arn",level:2},{value:"Using Visual Studio for TOPIC_ARN",id:"using-visual-studio-for-topic_arn",level:2},{value:"Using VSCode for TOPIC_ARN",id:"using-vscode-for-topic_arn",level:2},{value:"Using terminal for TOPIC_ARN",id:"using-terminal-for-topic_arn",level:2},{value:"Using Visual Studio Code for TOPIC_ARN",id:"using-visual-studio-code-for-topic_arn",level:2}],h={toc:m},g="wrapper";function f(e){var t=e.components,u=(0,o.Z)(e,s);return(0,r.kt)(g,(0,a.Z)({},h,u,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"configuring-the-project"},"Configuring the project"),(0,r.kt)("p",null,"All security sensitive information is passed as a secret in our configuration. We have a library called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Ensono/stacks-dotnet-packages-configuration"},"Ensono.Stacks.Configuration")," that reads secrets from the environment before the application starts and makes the needed substitutions in the configuration files."),(0,r.kt)("h3",{id:"configuring-cosmos-db"},"Configuring Cosmos DB"),(0,r.kt)("p",null,"The project can be set to use Azure ",(0,r.kt)("strong",{parentName:"p"},"Cosmos DB")," or an ",(0,r.kt)("strong",{parentName:"p"},"InMemory")," database to store the example application data. The ",(0,r.kt)("strong",{parentName:"p"},"InMemory")," database works out of the box and no further setup is required aside from creating your project. Depending on your desired setup you'll have to provide some or all of the configuration in the ",(0,r.kt)("inlineCode",{parentName:"p"},"appsettings.json")," file section showed below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"CosmosDb": {\n    "DatabaseAccountUri": "<Add CosmosDB Account URI here>",\n    "DatabaseName": "Stacks",\n    "SecurityKeySecret": {\n        "Identifier": "COSMOSDB_KEY",\n    ...\n    }\n}\n')),(0,r.kt)("br",null),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Using the Cosmos DB Emulator to run the database locally"),(0,r.kt)("div",null,(0,r.kt)("p",null,"For running on local environments (Windows/Linux/macOS) please follow the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/cosmos-db/local-emulator?tabs=ssl-netstd21"},"instructions provided by Microsoft.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to the local Cosmos DB URL in your browser as indicated in the documentation given in the above link.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Identify the ",(0,r.kt)("strong",{parentName:"p"},"Primary Key"),". Please refer to the field in the screenshot below. ",(0,r.kt)("img",{alt:"CosmosDB",src:n(1366).Z,width:"2432",height:"792"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Cosmos DB has to contain a fixed structure depending on your project. Create a collection ",(0,r.kt)("inlineCode",{parentName:"p"},"Stacks")," (this corresponds to ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseName")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"appsettings.json")," file) with a container id ",(0,r.kt)("inlineCode",{parentName:"p"},"Menu")," (name of domain object) and the partition key ",(0,r.kt)("inlineCode",{parentName:"p"},"/id"),". Keep in mind that if you've changed the domain (default being ",(0,r.kt)("inlineCode",{parentName:"p"},"Menu"),"), you have to supply your own domain when creating the container."))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"CosmosDB",src:n(3453).Z,width:"1238",height:"685"})),(0,r.kt)("admonition",{title:"CosmosDb environment variable",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To interact with CosmosDb there is a environment variable called ",(0,r.kt)("inlineCode",{parentName:"p"},"COSMOSDB_KEY")," that needs to be set before running your application. This variable holds the value of the ",(0,r.kt)("strong",{parentName:"p"},"Primary Key")," you got from step 2. Please see the next section on details of how to set it on your machine.")))),(0,r.kt)("br",null),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Setting the COSMOSDB_KEY environment variable"),(0,r.kt)("div",null,(0,r.kt)(i.Z,{defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Unix",value:"unix"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"windows",mdxType:"TabItem"},(0,r.kt)("p",null,"There are a couple of different ways to set the environment variable"),(0,r.kt)("h2",{id:"using-powershell-for-cosmosdb_key"},"Using Powershell for COSMOSDB_KEY"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Powershell")," with administrator privileges to execute the command below. Substitute ",(0,r.kt)("inlineCode",{parentName:"p"},"<PRIMARY-KEY-HERE>")," with your own key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:'title="Run PS command to add the COSMOSDB_KEY system variable"',title:'"Run',PS:!0,command:!0,to:!0,add:!0,the:!0,COSMOSDB_KEY:!0,system:!0,'variable"':!0},'[Environment]::SetEnvironmentVariable("COSMOSDB_KEY", "<PRIMARY-KEY-HERE>", [EnvironmentVariableTarget]::Machine)\n')),(0,r.kt)("h2",{id:"using-visual-studio-for-cosmosdb_key"},"Using Visual Studio for COSMOSDB_KEY"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the project in Visual Studio. The solution file is located at ",(0,r.kt)("inlineCode",{parentName:"p"},"src/api/xxAMIDOxx.xxSTACKSxx.API.sln"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add ",(0,r.kt)("strong",{parentName:"p"},"COSMOSDB_KEY")," environment variable to the ",(0,r.kt)("strong",{parentName:"p"},"launchSettings.json")," file generated by Visual Studio and add the Cosmos DB Primary Key value."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/api/xxAMIDOxx.xxSTACKSxx.API/properties/launchSettings.json"',title:'"src/api/xxAMIDOxx.xxSTACKSxx.API/properties/launchSettings.json"'},'{\n  ...\n  "profiles": {\n    "xxAMIDOxx.xxSTACKSxx.API": {\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development",\n        "COSMOSDB_KEY": "<PRIMARY-KEY-HERE>"\n        ...\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"using-vscode-for-cosmosdb_key"},"Using VSCode for COSMOSDB_KEY"),(0,r.kt)("p",null,"If you're using VSCode that means you'll have a ",(0,r.kt)("inlineCode",{parentName:"p"},"launch.json")," file generated when you try to run the project. In that file there's an ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," section where you can put environment variables for the current session."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="launch.json"',title:'"launch.json"'},'"env": {\n    ...\n    "COSMOSDB_KEY": "<PRIMARY-KEY-HERE>",\n    ...\n}\n')),(0,r.kt)("admonition",{title:"Note on usage",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The variable is referenced in ",(0,r.kt)("strong",{parentName:"p"},"appsettings.json"),". As mentioned in the beginning section of this page this environment variable name will be substituted with the actual value on startup."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"CosmosDb": {\n    ...\n    "SecurityKeySecret": {\n        "Identifier": "COSMOSDB_KEY",\n        ...\n    }\n}\n')))),(0,r.kt)(l.Z,{value:"unix",mdxType:"TabItem"},(0,r.kt)("p",null,"There are a couple of different ways to set the environment variable"),(0,r.kt)("h2",{id:"using-terminal-for-cosmosdb_key"},"Using terminal for COSMOSDB_KEY"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"terminal")," to execute the command below. Substitute ",(0,r.kt)("inlineCode",{parentName:"p"},"<PRIMARY-KEY-HERE>")," with your own key. This will set the environment variable only for the current session of your terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Run terminal command to add the COSMOSDB_KEY system variable"',title:'"Run',terminal:!0,command:!0,to:!0,add:!0,the:!0,COSMOSDB_KEY:!0,system:!0,'variable"':!0},"export COSMOSDB_KEY=<PRIMARY-KEY-HERE>\n")),(0,r.kt)("p",null,"To set the environment variable permanently on your system you'll have to edit your ",(0,r.kt)("inlineCode",{parentName:"p"},"bash_profile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".zshenv")," file depending on which shell are you using."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',title:'"Example',for:!0,setting:!0,env:!0,variable:!0,in:!0,'.zchenv"':!0},"echo 'export COSMOSDB_KEY=<PRIMARY-KEY-HERE>' >> ~/.zshenv\n")),(0,r.kt)("h2",{id:"using-visual-studio-code-for-cosmosdb_key"},"Using Visual Studio Code for COSMOSDB_KEY"),(0,r.kt)("p",null,"If you're using VSCode that means you'll have a ",(0,r.kt)("inlineCode",{parentName:"p"},"launch.json")," file generated when you try to run the project. In that file there's an ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," section where you can put environment variables for the current session."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="launch.json"',title:'"launch.json"'},'"env": {\n    ...\n    "COSMOSDB_KEY": "<PRIMARY-KEY-HERE>",\n    ...\n}\n')),(0,r.kt)("admonition",{title:"Note on usage",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The variable is referenced in ",(0,r.kt)("strong",{parentName:"p"},"appsettings.json"),". As mentioned in the beginning section of this page this environment variable name will be substituted with the actual value on startup."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"CosmosDb": {\n    ...\n    "SecurityKeySecret": {\n        "Identifier": "COSMOSDB_KEY",\n        ...\n    }\n}\n'))))))),(0,r.kt)("br",null),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Connecting to deployed Cosmos DB instance"),(0,r.kt)("div",null,"When choosing not to run the CosmosDB locally via the emulator, further configuration needs to be changed in the `appsettings.json` file.",(0,r.kt)("p",null,"Aside from setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"COSMOSDB_KEY")," as an environment variable (described in the previous section), you'll have to set the CosmosDB URI parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseAccountUri")," as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"CosmosDb": {\n    "DatabaseAccountUri": "<Add CosmosDB Account URI here>",\n    "DatabaseName": "Stacks",\n    "SecurityKeySecret": {\n        "Identifier": "COSMOSDB_KEY",\n    ...\n    }\n}\n')))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"configuring-dynamodb"},"Configuring DynamoDB"),(0,r.kt)("p",null,"You need a DynamoDB instance in order to connect the API to it. You can follow the official instructions provided by AWS ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html"},"here"),"."),(0,r.kt)("p",null,"Relevant documentation pages that you can follow to set up your profile:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"},"Configuration and credential file settings"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html"},"Named profiles")))),(0,r.kt)("p",null,"The template and NuGet package assumes you'll use the ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS CLI")," tools and will have configured your access keys via the ",(0,r.kt)("inlineCode",{parentName:"p"},"aws configure")," command."),(0,r.kt)("p",null,"Depending on your desired setup you'll have to provide some or all of the configuration in the ",(0,r.kt)("inlineCode",{parentName:"p"},"appsettings.json")," file section showed below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"DynamoDb": {\n    "TableName": "Menu",\n    "TablePrefix": ""\n}\n')),(0,r.kt)("h3",{id:"ensonostacksdynamodb-package"},"Ensono.Stacks.DynamoDB package"),(0,r.kt)("p",null,"This template uses the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Ensono/stacks-dotnet-packages-dynamodb"},"Ensono.Stacks.DynamoDB")," package to connect and use DynamoDB."),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"configuring-aws-sns"},"Configuring AWS SNS"),(0,r.kt)("p",null,"The project can be set to use AWS ",(0,r.kt)("strong",{parentName:"p"},"SNS")," to publish and consume events. In order to publish messages to a Queue you will also require a version of AWS SQS running on AWS cloud. For SNS to work out the box with AWS you will have to provide some configuration in the ",(0,r.kt)("inlineCode",{parentName:"p"},"appsettings.json")," file section showed below as well as subscribeaing your SNS topic to your SQS queue."),(0,r.kt)("p",null,"You will also be required to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"TOPIC_ARN")," as an environment variable (see section ",(0,r.kt)("strong",{parentName:"p"},"Setting the TOPIC_ARN environment variable"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"<PROJECT-NAME>/src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"AwsSnsConfiguration": {\n  "TopicArn": {\n        "Identifier": "TOPIC_ARN",\n    ...\n    }\n},\n"AWS": {\n    "Region": "eu-west-2"\n}\n')),(0,r.kt)("br",null),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Using the AWS SNS to publish messages"),(0,r.kt)("div",null,(0,r.kt)("p",null,"For running on local environments you will still require a version of AWS SNS running on AWS cloud."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to the SNS Topic in your browser.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Identify the ",(0,r.kt)("strong",{parentName:"p"},"TopicArn"),". This is located within: Amazon SNS --\x3e Topics --\x3e topic-name (e.g. stacks-dev) --\x3e TopicArn")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Apply the ",(0,r.kt)("strong",{parentName:"p"},"TopicArn")," obtained to the environmental variable called ",(0,r.kt)("inlineCode",{parentName:"p"},"TOPIC_ARN")," (Please see the next section on details of how to set it on your machine).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run your application and carry out some event worth actions (create domain objects, retrieve domain objects, delete domain objects etc...). Any time you carry out an action which should raise an event, there will be an event raised within your AWS SQS queue.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Navigate to the SQS Queue in your browser and select ",(0,r.kt)("inlineCode",{parentName:"p"},"Send and receive messages"),". Select ",(0,r.kt)("inlineCode",{parentName:"p"},"Poll for messages")," and see all the events raised."))))),(0,r.kt)("br",null),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Setting the TOPIC_ARN environment variable"),(0,r.kt)("div",null,(0,r.kt)(i.Z,{defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Unix",value:"unix"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"windows",mdxType:"TabItem"},(0,r.kt)("p",null,"There are a couple of different ways to set the environment variable"),(0,r.kt)("h2",{id:"using-powershell-for-topic_arn"},"Using Powershell for TOPIC_ARN"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Powershell")," with administrator privileges to execute the command below. Substitute ",(0,r.kt)("inlineCode",{parentName:"p"},"<TOPIC-ARN-HERE>")," with your own key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell",metastring:'title="Run PS command to add the TOPIC_ARN system variable"',title:'"Run',PS:!0,command:!0,to:!0,add:!0,the:!0,TOPIC_ARN:!0,system:!0,'variable"':!0},'[Environment]::SetEnvironmentVariable("TOPIC_ARN", "<TOPIC-ARN-HERE>", [EnvironmentVariableTarget]::Machine)\n')),(0,r.kt)("h2",{id:"using-visual-studio-for-topic_arn"},"Using Visual Studio for TOPIC_ARN"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the project in Visual Studio. The solution file is located at ",(0,r.kt)("inlineCode",{parentName:"p"},"src/api/xxAMIDOxx.xxSTACKSxx.API.sln"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add ",(0,r.kt)("strong",{parentName:"p"},"TOPIC_ARN")," environment variable to the ",(0,r.kt)("strong",{parentName:"p"},"launchSettings.json")," file generated by Visual Studio and add the SNS topic ARN value."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/api/xxAMIDOxx.xxSTACKSxx.API/properties/launchSettings.json"',title:'"src/api/xxAMIDOxx.xxSTACKSxx.API/properties/launchSettings.json"'},'{\n  ...\n  "profiles": {\n    "xxAMIDOxx.xxSTACKSxx.API": {\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development",\n        "TOPIC_ARN": "<TOPIC-ARN-HERE>"\n        ...\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"using-vscode-for-topic_arn"},"Using VSCode for TOPIC_ARN"),(0,r.kt)("p",null,"If you're using VSCode that means you'll have a ",(0,r.kt)("inlineCode",{parentName:"p"},"launch.json")," file generated when you try to run the project. In that file there's an ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," section where you can put environment variables for the current session."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="launch.json"',title:'"launch.json"'},'"env": {\n    ...\n    "TOPIC_ARN": "<TOPIC-ARN-HERE>",\n    ...\n}\n')),(0,r.kt)("admonition",{title:"Note on usage",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The variable is referenced in ",(0,r.kt)("strong",{parentName:"p"},"appsettings.json"),". As mentioned in the beginning section of this page this environment variable name will be substituted with the actual value on startup."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"AwsSnsConfiguration": {\n  "TopicArn": {\n        "Identifier": "TOPIC_ARN",\n    ...\n    }\n}\n')))),(0,r.kt)(l.Z,{value:"unix",mdxType:"TabItem"},(0,r.kt)("p",null,"There are a couple of different ways to set the environment variable"),(0,r.kt)("h2",{id:"using-terminal-for-topic_arn"},"Using terminal for TOPIC_ARN"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"terminal")," to execute the command below. Substitute ",(0,r.kt)("inlineCode",{parentName:"p"},"<TOPIC-ARN-HERE>")," with your own key. This will set the environment variable only for the current session of your terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Run terminal command to add the TOPIC_ARN system variable"',title:'"Run',terminal:!0,command:!0,to:!0,add:!0,the:!0,TOPIC_ARN:!0,system:!0,'variable"':!0},"export TOPIC_ARN=<TOPIC-ARN-HERE>\n")),(0,r.kt)("p",null,"To set the environment variable permanently on your system you'll have to edit your ",(0,r.kt)("inlineCode",{parentName:"p"},"bash_profile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".zshenv")," file depending on which shell are you using."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',title:'"Example',for:!0,setting:!0,env:!0,variable:!0,in:!0,'.zchenv"':!0},"echo 'export TOPIC_ARN=<TOPIC-ARN-HERE>' >> ~/.zshenv\n")),(0,r.kt)("h2",{id:"using-visual-studio-code-for-topic_arn"},"Using Visual Studio Code for TOPIC_ARN"),(0,r.kt)("p",null,"If you're using VSCode that means you'll have a ",(0,r.kt)("inlineCode",{parentName:"p"},"launch.json")," file generated when you try to run the project. In that file there's an ",(0,r.kt)("inlineCode",{parentName:"p"},"env")," section where you can put environment variables for the current session."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="launch.json"',title:'"launch.json"'},'"env": {\n    ...\n    "TOPIC_ARN": "<TOPIC-ARN-HERE>",\n    ...\n}\n')),(0,r.kt)("admonition",{title:"Note on usage",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The variable is referenced in ",(0,r.kt)("strong",{parentName:"p"},"appsettings.json"),". As mentioned in the beginning section of this page this environment variable name will be substituted with the actual value on startup."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"',title:'"src/api/xxAMIDOxx.xxSTACKSxx.API/appsettings.json"'},'"AwsSnsConfiguration": {\n  "TopicArn": {\n        "Identifier": "TOPIC_ARN",\n    ...\n    }\n}\n'))))))))}f.isMDXComponent=!0},3453:function(e,t,n){t.Z=n.p+"assets/images/cosmosdb_emulator_1-eb5c6355a0662db45234724a920edac3.png"},1366:function(e,t,n){t.Z=n.p+"assets/images/cosmosdb_emulator_3-ddb539bc14733fdf2bc3cb8dc022cf09.png"}}]);