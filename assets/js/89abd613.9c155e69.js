"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[4185],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),g=l(t),d=o,f=g["".concat(s,".").concat(d)]||g[d]||p[d]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[g]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3639:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={id:"configure_swagger_netcore",title:"Configure Swagger",sidebar_label:"Swagger",hide_title:!0,hide_table_of_contents:!0,description:"Configure Swagger for .NET Core REST API application",keywords:[".net core","rest","api","tests","stacks","swagger","registration","controller","configuration","dotnet"]},s=void 0,l={unversionedId:"workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore",id:"workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore",isDocsHomePage:!1,title:"Configure Swagger",description:"Configure Swagger for .NET Core REST API application",source:"@site/docs/workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore.md",sourceDirName:"workloads/azure/backend/netcore/architecture/swagger_configuration",slug:"/workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore",permalink:"/docs/workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore",tags:[],version:"current",frontMatter:{id:"configure_swagger_netcore",title:"Configure Swagger",sidebar_label:"Swagger",hide_title:!0,hide_table_of_contents:!0,description:"Configure Swagger for .NET Core REST API application",keywords:[".net core","rest","api","tests","stacks","swagger","registration","controller","configuration","dotnet"]},sidebar:"docs",previous:{title:"NuGet Dependencies",permalink:"/docs/workloads/azure/backend/netcore/architecture/nuget_dependencies"},next:{title:"Swagger UI",permalink:"/docs/workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_ui_netcore"}},u=[{value:"Configure Swagger",id:"configure-swagger",children:[],level:2}],g={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"configure-swagger"},"Configure Swagger"),(0,i.kt)("br",null),(0,i.kt)("p",null,"The document generation configuration is done in the Startup class of your API, within the ConfigureServices(IServiceCollection services) method. A call to the extension method ",(0,i.kt)("inlineCode",{parentName:"p"},"AddSwaggerGen(Action<SwaggerGenOptions> setupAction)")," is made passing an action to generate the documentation options."),(0,i.kt)("p",null,"Each call to ",(0,i.kt)("inlineCode",{parentName:"p"},"AddSwaggerGen()")," will generate a new document. The parameters passed will be used to configure the rules for document generation. The output of a document generation process is a simple JSON file. By default the file(spec) will be available on ",(0,i.kt)("inlineCode",{parentName:"p"},"/swagger/versionName/swagger.json"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Startup.cs (Register doc generation)"',title:'"Startup.cs',"(Register":!0,doc:!0,'generation)"':!0},'public class Startup\n{\n    public IConfiguration Configuration { get; }\n    private readonly IHostingEnvironment _hostingEnv;\n\n    public Startup(IHostingEnvironment env, IConfiguration configuration)\n    {\n        _hostingEnv = env;\n        Configuration = configuration;\n    }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n            .AddMvcCore()\n            .AddApiExplorer()\n            ... Omit for brevity ...;\n\n        services\n            .AddSwaggerGen(c =>\n            {\n                //defines the doc version\n                c.SwaggerDoc("v1", new Info\n                {\n                    Version = "v1",\n                    Title = "API",\n                    Description = "APIs endpoints"\n                });\n\n                //will generate models containing only the class name, ignoring the namespace\n                c.CustomSchemaIds(type => type.FriendlyId(false));\n\n                //Enum will be generated as strings\n                c.DescribeAllEnumsAsStrings();\n\n                //Will load the comments provided in the code using / / / , the build will generate the xml file in the output folder.\n                // Make sure the project file contains the attribute <GenerateDocumentationFile>true</GenerateDocumentationFile>\n                c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{_hostingEnv.ApplicationName}.xml");\n\n                // Show only operations where route starts with v1\n                c.DocumentFilter<VersionPathFilter>("/v1");\n\n                // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)\n                // Enforce parameters provided in the path to be required\n                // Use [ValidateModelState] on Actions to actually validate it in C# as well!\n                c.OperationFilter<GeneratePathParamsValidationFilter>();\n            });\n    }\n}\n')),(0,i.kt)("p",null,"The snippet above demonstrates the usage of ",(0,i.kt)("inlineCode",{parentName:"p"},".AddSwaggerGen()")," to register the document generation. The output of this snipped will generate a document found on the path ",(0,i.kt)("inlineCode",{parentName:"p"},"/swagger/v1/swagger.json"),"."))}p.isMDXComponent=!0}}]);