"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[7303],{4003:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>r});var o=a(4848),t=a(8453);const s={id:"setting_up_dynamodb_locally_java",title:"DynamoDB Emulator",sidebar_label:"DynamoDB Emulator",hide_title:!1,hide_table_of_contents:!1,description:"How to set up the DynamoDB Emulator",keywords:["dynamodb","emulator","settings","template"]},l=void 0,d={id:"workloads/aws/backend/java/setting_up_dynamodb_locally_java",title:"DynamoDB Emulator",description:"How to set up the DynamoDB Emulator",source:"@site/docs/workloads/aws/backend/java/setting_up_dynamodb_locally_java.md",sourceDirName:"workloads/aws/backend/java",slug:"/workloads/aws/backend/java/setting_up_dynamodb_locally_java",permalink:"/docs/workloads/aws/backend/java/setting_up_dynamodb_locally_java",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"setting_up_dynamodb_locally_java",title:"DynamoDB Emulator",sidebar_label:"DynamoDB Emulator",hide_title:!1,hide_table_of_contents:!1,description:"How to set up the DynamoDB Emulator",keywords:["dynamodb","emulator","settings","template"]},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/workloads/common/backend/java/intro_java"},next:{title:"Running the AWS XRay Daemon",permalink:"/docs/workloads/aws/backend/java/setting_up_xray_daemon_locally_java"}},i={},r=[{value:"Introduction",id:"introduction",level:2},{value:"Starting the DynamoDB Emulator",id:"starting-the-dynamodb-emulator",level:2},{value:"DynamoDB Emulator endpoint",id:"dynamodb-emulator-endpoint",level:2},{value:"Interacting with the DynamoDB Emulator",id:"interacting-with-the-dynamodb-emulator",level:2},{value:"Creating the Ensono Stacks Menu table",id:"creating-the-ensono-stacks-menu-table",level:2},{value:"Executing Ensono Stacks Workload using DynamoDB rather than CosmosDB",id:"executing-ensono-stacks-workload-using-dynamodb-rather-than-cosmosdb",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["This page is ",(0,o.jsx)(n.strong,{children:"work in progress"})," and will be completed as the Ensono Stacks DynamoDB support is more fully developed."]}),"\n",(0,o.jsx)(n.h2,{id:"starting-the-dynamodb-emulator",children:"Starting the DynamoDB Emulator"}),"\n",(0,o.jsx)(n.p,{children:"There are two options for running the DynamoDB emulator, these are as follows: -"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Running as a JAR (requires Java)"}),"\n",(0,o.jsx)(n.li,{children:"Running as a Docker image (requires Docker Desktop or alternative container services)"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If you would like to run it as a JAR, follow the instructions here: ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html",children:"Deploying DynamoDB locally on your computer"})]}),"\n",(0,o.jsxs)(n.p,{children:["If you prefer to use Docker, there is a ",(0,o.jsx)(n.code,{children:"docker-compose.yml"})," file within the ",(0,o.jsx)(n.code,{children:"stacks-java-aws-dynamodb"})," GitHub project. This\nis replicated below for convenience: -"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"version: '3.7'\nservices:\n  dynamodb:\n    image:  amazon/dynamodb-local\n    container_name: dynamodb-local\n    hostname: dynamodb\n    volumes:\n      -  ~/docker-data/dynamodb-local-data:/home/dynamodblocal/data\n    ports:\n      - 8000:8000\n    command: \"-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/\"\n"})}),"\n",(0,o.jsx)(n.p,{children:"To start the DynamoDB in Docker use the command: -"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker compose -f docker-compose.yml up\n"})}),"\n",(0,o.jsx)(n.p,{children:"which should yield the following output: -"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"Attaching to dynamodb-local\ndynamodb-local  | Initializing DynamoDB Local with the following configuration:\ndynamodb-local  | Port:\t8000\ndynamodb-local  | InMemory:\tfalse\ndynamodb-local  | DbPath:\t/home/dynamodblocal/data/\ndynamodb-local  | SharedDb:\ttrue\ndynamodb-local  | shouldDelayTransientStatuses:\tfalse\ndynamodb-local  | CorsParams:\t*\ndynamodb-local  |\n"})}),"\n",(0,o.jsx)(n.h2,{id:"dynamodb-emulator-endpoint",children:"DynamoDB Emulator endpoint"}),"\n",(0,o.jsxs)(n.p,{children:["Irrespective of the way that the emulator was started there should now be an instance of DynamoDB listening on ",(0,o.jsx)(n.code,{children:"localhost"}),"\nat port ",(0,o.jsx)(n.code,{children:"8000"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"interacting-with-the-dynamodb-emulator",children:"Interacting with the DynamoDB Emulator"}),"\n",(0,o.jsxs)(n.p,{children:["To interact with the database you will need to have thw AWS CLI application installed. If you do not already have this installed\nyou can find instructions for doing so here : ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html",children:"Installing the AWS CLI"})]}),"\n",(0,o.jsx)(n.p,{children:"Once you have the AWS CLI installed it should now be possible to interact with the database. For example, to list the tables\nthat have been created in the database use:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aws dynamodb list-tables --endpoint-url http://localhost:8000\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-ensono-stacks-menu-table",children:"Creating the Ensono Stacks Menu table"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"NOTE: This section needs updating to provide a more complete data model for Menu; it will at least support basic querying and\ncreation of a top level Menu item for the time being. For sub-objects, such as Categories and Items the schema below will\nneed to be further worked on."})}),"\n",(0,o.jsxs)(n.p,{children:["To create the Menu table (if it doesn't already exist) create a file with the following content in a temporary location and\nname it ",(0,o.jsx)(n.strong,{children:"Menu.dynamodb.json"}),": -"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'{\n        "AttributeDefinitions": [\n            {\n                "AttributeName": "id",\n                "AttributeType": "S"\n            }\n        ],\n        "TableName": "Menu",\n        "KeySchema": [\n            {\n                "AttributeName": "id",\n                "KeyType": "HASH"\n            }\n        ],\n        "ProvisionedThroughput": {\n            "ReadCapacityUnits": 1,\n            "WriteCapacityUnits": 1\n        }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Create the table in DynamoDB using the following command: -"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"aws dynamodb create-table --cli-input-json file://Menu.dynamodb.json --endpoint-url http://localhost:8000\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you now list the tables it should return the name of the table just created (e.g. Menu): -"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'aws dynamodb list-tables --endpoint-url http://localhost:8000 | cat\n\n{\n    "TableNames": [\n        "Menu"\n    ]\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"After data has been added to the Menu table using the workload APIs it is possible to scan the records using the following command: -"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'aws dynamodb scan --consistent-read --table-name Menu --endpoint-url http://localhost:8000 | cat\n\n{\n    "Items": [\n        {\n            "name": {\n                "S": "Test Menu 1"\n            },\n            "description": {\n                "S": "Test menu no. 1"\n            },\n            "id": {\n                "S": "7a994352-dc9e-4b11-8c0f-36792489f112"\n            },\n            "categories": {\n                "L": [\n            ...\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Additional ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html",children:"DynamoDB API query examples"})," can be found online."]}),"\n",(0,o.jsx)(n.h2,{id:"executing-ensono-stacks-workload-using-dynamodb-rather-than-cosmosdb",children:"Executing Ensono Stacks Workload using DynamoDB rather than CosmosDB"}),"\n",(0,o.jsxs)(n.p,{children:["TODO: ",(0,o.jsx)(n.strong,{children:"Move this to a better area once the DynamoDB work is completed"})]}),"\n",(0,o.jsx)(n.p,{children:"There are a few steps required to use DynamoDB rather than CosmosDB: -"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Ensure that the module ",(0,o.jsx)(n.code,{children:"stacks-aws-dynamodb"})," is present (and version number correct( in the ",(0,o.jsx)(n.strong,{children:"dynamodb"})," ",(0,o.jsx)(n.code,{children:"pom.xml"})," (section profile[id='dynamodb'] > dependencies > dependency)","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["To get the current WIP version of the module run the following commands:","\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"git clone https://github.com/Ensono/stacks-java-aws-dynamodb.git"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"mvn clean install"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Check that the endpoint specified in ",(0,o.jsx)(n.code,{children:"application-dynamodb.yml"})," is correct (local or pointing at AWS per requirements)"]}),"\n",(0,o.jsx)(n.li,{children:"Switch off the CosmosDB profile and switch on the DynamoDB profile when starting the workload"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The current definition of the profile in (for example) the stacks-cqrs-with-events project ",(0,o.jsx)(n.code,{children:"pom.xml"})," needs to be as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<profile>\n  <id>dynamodb</id>\n  <properties>\n    <dynamodb.profile.name>dynamodb</dynamodb.profile.name>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>com.amido.stacks.modules</groupId>\n      <artifactId>stacks-aws-dynamodb</artifactId>\n      <version>${stacks.aws.dynamodb.version}</version>\n    </dependency>\n  </dependencies>\n</profile>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To start the application either use ",(0,o.jsx)(n.code,{children:"sh run_scenario.sh"})," and pick the required features, or run the command: -"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mvn clean spring-boot:run -Pazure,aws,dynamodb,servicebus,-cosmosdb\n"})}),"\n",(0,o.jsx)(n.p,{children:"Remember that Cosmos DB and DynamoDB are mutually exclusive, so only use one or the other."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>d});var o=a(6540);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);