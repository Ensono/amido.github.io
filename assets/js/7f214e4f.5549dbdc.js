"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[4046],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4525:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={id:"api_definition_csr",title:"Api Definition",sidebar_label:"Api Definition",hide_title:!1,hide_table_of_contents:!1,description:"Api Definition",keywords:["rest","api","csr","scaffolding","template","example","backend","axios","client side rendering","server side rendering"]},s=void 0,l={unversionedId:"workloads/azure/frontend-archived/CSR/api_definition_csr",id:"workloads/azure/frontend-archived/CSR/api_definition_csr",title:"Api Definition",description:"Api Definition",source:"@site/docs/workloads/azure/frontend-archived/CSR/api_definition_csr.md",sourceDirName:"workloads/azure/frontend-archived/CSR",slug:"/workloads/azure/frontend-archived/CSR/api_definition_csr",permalink:"/docs/workloads/azure/frontend-archived/CSR/api_definition_csr",draft:!1,tags:[],version:"current",frontMatter:{id:"api_definition_csr",title:"Api Definition",sidebar_label:"Api Definition",hide_title:!1,hide_table_of_contents:!1,description:"Api Definition",keywords:["rest","api","csr","scaffolding","template","example","backend","axios","client side rendering","server side rendering"]}},p={},u=[],d={toc:u},f="wrapper";function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)(f,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The generated scaffolding can be quickly used make calls to external APIs\nmeaning another endpoint either within your system developed by another team or\na public endpoint of 3rd party provider e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"hotels.com")," etc..."),(0,o.kt)("p",null,"The backend (and frontend) uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"axios"),"\nlibrary as the HTTP Client."),(0,o.kt)("p",null,"It is on purpose left as a thin wrapper implementation so that the user can\nextend with additional parameters on top of the mandated ones; ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"method")," -\ne.g. a header for authentication. As such it only returns an unopinionated axios\nInstance and not a method initialized implementation. the method parameter is\nmainly used as a type guard."),(0,o.kt)("p",null,"Sample implementation of an entire API can be found in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"../src/state/ducks/get-menus"),", this demonstrates how to setup a saga to fetch a specific business endpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'export const fetchMenus = () =>\n    action(GetMenuActionTypes.FETCH_POSTS, [], {\n        method: "get" as Method,\n        route: "/menu", // Todo: Point to deployed example API\n    })\n')),(0,o.kt)("p",null,"The specific saga implementation is ",(0,o.kt)("inlineCode",{parentName:"p"},"../src/state/ducks/get-menus/saga")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'import {all, call, fork, put, takeEvery} from "redux-saga/effects"\nimport {\n    MetaActionWithAPI,\n    GetMenuActionTypes,\n    MenuItem,\n} from "../../../interfaces/sagas.interface"\nimport apiCaller from "../../../services/apiCaller"\nimport {fetchMenusError, fetchMenusSuccess} from "./actions"\n\nfunction* handleFetch(action: MetaActionWithAPI): Generator {\n    try {\n        // eslint-disable-next-line\n        const res: MenuItem[] | any = yield call(\n            apiCaller,\n            action.meta.method,\n            action.meta.route,\n        )\n        yield put(fetchMenusSuccess(res))\n    } catch (err) {\n        if (err instanceof Error) {\n            console.error(err)\n            yield put(fetchMenusError(err.message))\n        } else {\n            yield put(fetchMenusError("An unknown error occurred."))\n        }\n    }\n}\n\nfunction* watchFetchRequest(): Generator {\n    yield takeEvery(GetMenuActionTypes.FETCH_POSTS, handleFetch)\n}\n\nexport default function* postSaga() {\n    yield all([fork(watchFetchRequest)])\n}\n')),(0,o.kt)("p",null,"Feel free to modify the example code for your own API endpoints!"))}m.isMDXComponent=!0}}]);