"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[3136],{9294:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=r(4848),o=r(8453),i=r(6025);const s={id:"infrastructure_netcore",title:".NET Core - Azure Infrastructure",sidebar_label:"Infrastructure",description:"High level design of the reference implementation of the .NET Core Ensono Stacks REST API with CQRS.",keywords:[".net core","rest api","cqrs","pipeline","azure","azure container registry","azure kubernetes service","application insights","cosmos db","deployment"]},a=void 0,c={id:"workloads/azure/backend/netcore/infrastructure_netcore",title:".NET Core - Azure Infrastructure",description:"High level design of the reference implementation of the .NET Core Ensono Stacks REST API with CQRS.",source:"@site/docs/workloads/azure/backend/netcore/infrastructure_netcore.md",sourceDirName:"workloads/azure/backend/netcore",slug:"/workloads/azure/backend/netcore/infrastructure_netcore",permalink:"/docs/workloads/azure/backend/netcore/infrastructure_netcore",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"infrastructure_netcore",title:".NET Core - Azure Infrastructure",sidebar_label:"Infrastructure",description:"High level design of the reference implementation of the .NET Core Ensono Stacks REST API with CQRS.",keywords:[".net core","rest api","cqrs","pipeline","azure","azure container registry","azure kubernetes service","application insights","cosmos db","deployment"]},sidebar:"docs",previous:{title:"Functionally Testing the API",permalink:"/docs/workloads/azure/backend/netcore/testing/functional_testing_netcore"},next:{title:"Pipeline",permalink:"/docs/workloads/azure/backend/netcore/pipeline_netcore"}},d={},l=[{value:"Overview",id:"overview",level:2},{value:"Diagram",id:"diagram",level:3},{value:"Resource List",id:"resource-list",level:3},{value:"Deploying",id:"deploying",level:2},{value:"Pipelines",id:"pipelines",level:3},{value:"Running Locally",id:"running-locally",level:3}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"This page present the high level design of the reference implementation of the .NET Core Ensono Stacks REST API with CQRS."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["This page assumes that the core infrastructure has already been provisioned. Instructions and additional information on the core infrastructure can be found ",(0,t.jsx)(n.a,{href:"/docs/infrastructure/azure/core_infrastructure",children:"here"})]})}),"\n",(0,t.jsx)(n.p,{children:"Both the diagram and resource list below are for a single environment."}),"\n",(0,t.jsx)(n.h3,{id:"diagram",children:"Diagram"}),"\n",(0,t.jsx)("img",{alt:"Azure .NET API Infrastructure",src:(0,i.Ay)("img/azure_rest_api_infrastructure.png")}),"\n",(0,t.jsx)(n.h3,{id:"resource-list",children:"Resource List"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Resource"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Resource Group - Core*****"}),(0,t.jsx)(n.td,{children:"Used to logically group core infrastructure"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"AKS*****"}),(0,t.jsx)(n.td,{children:"Azure Kubernetes Service"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Public DNS Record"}),(0,t.jsx)(n.td,{children:"DNS record pointing Ingress (via application gateway***** and internal load balancer*****)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ACR*****"}),(0,t.jsx)(n.td,{children:"Azure Container Registry"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Namespace: ",(0,t.jsx)(n.code,{children:"{env}-api"})]}),(0,t.jsx)(n.td,{children:"Kubernetes namespace for the environment"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Ingress"}),(0,t.jsx)(n.td,{children:"Kubernetes Ingress to handle routing to Service"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Service"}),(0,t.jsx)(n.td,{children:"Kubernetes Service to handle routing to Deployment Pods"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Deployment"}),(0,t.jsx)(n.td,{children:"Kubernetes Deployment for managing Pods"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Resource Group - API"}),(0,t.jsx)(n.td,{children:"Used to logically group API specific infrastructure"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Cosmos DB"}),(0,t.jsx)(n.td,{children:"Azure managed NoSQL database"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"*"})," ",(0,t.jsx)(n.em,{children:"Resource is created by the core infrastructure deployment."})]}),"\n",(0,t.jsx)(n.h2,{id:"deploying",children:"Deploying"}),"\n",(0,t.jsx)(n.h3,{id:"pipelines",children:"Pipelines"}),"\n",(0,t.jsx)(n.p,{children:"The following pipelines are currently supported for automating the deployment:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/workloads/azure/backend/netcore/pipeline_netcore",children:"Azure DevOps"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"running-locally",children:"Running Locally"}),"\n",(0,t.jsx)(n.p,{children:"Currently, vars.tf and provider configuration is not\nautomatically updated. Future iterations will include this."}),"\n",(0,t.jsx)(n.p,{children:"The safest way to run and maintain this locally is to rely on Docker and environment\nvariables as that is the way the pipeline will trigger the\nexecutions of Terraform."}),"\n",(0,t.jsx)(n.p,{children:"Sample commands with example environment vars:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Navigate to the infra directory\ncd ${YOUR_DIRECTORY_PATH}/deploy/azure/app\n\n# Run Ensono Terraform Docker container\ndocker run -v $(pwd):/usr/data --rm -it amidostacks/ci-tf:0.0.4 /bin/bash\n\n###########################################################################\n# All commands from this point should be executed in the Docker container #\n###########################################################################\n\n# Navigate to /usr/data directory\ncd /usr/data\n\n# Export Azure Credentials. Replace the example values.\nexport ARM_CLIENT_ID=1111-2222-3333-444 \\\nARM_CLIENT_SECRET=1111-2222-3333-4444 \\\nARM_SUBSCRIPTION_ID=1111-2222-3333-444 \\\nARM_TENANT_ID=1111-2222-3333-444\n\n# Export Terraform variables. Replace the example values.\nexport TF_VAR_name_company=amido \\\nTF_VAR_name_project=example \\\nTF_VAR_name_domain=menu-api \\\nTF_VAR_name_environment=dev \\\nTF_VAR_core_resource_group=amido-example-nonprod-uks-core \\\nTF_VAR_resource_group_location=uksouth \\\nTF_VAR_app_gateway_frontend_ip_name=amido-example-nonprod-uks-core \\\nTF_VAR_create_dns_record=true \\\nTF_VAR_dns_zone_name=nonprod.amidostacks.com \\\nTF_VAR_dns_record=dev-menu-api \\\nTF_VAR_internal_dns_zone_name=nonprod.amidostacks.internal \\\nTF_VAR_create_cosmosdb=true \\\nTF_VAR_cosmosdb_sql_container=Menu \\\nTF_VAR_cosmosdb_sql_container_partition_key=/id \\\nTF_VAR_cosmosdb_kind=GlobalDocumentDB \\\nTF_VAR_cosmosdb_offer_type=Standard \\\nTF_VAR_app_insights_name=amido-example-nonprod-uks-core\n\n# Initial Terraform. Replace the example values.\nterraform init \\\n-backend-config="resource_group_name=amido-stacks-terraform" \\\n-backend-config="storage_account_name=amidostacksterraform" \\\n-backend-config="container_name=tfstate" \\\n-backend-config="key=example-menu-api"\n\n# Select or create the "dev" workspace.\nterraform workspace select dev || terraform workspace new dev\n\n# Check the plan matches your expected changes.\nterraform plan\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);