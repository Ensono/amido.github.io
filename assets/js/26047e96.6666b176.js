"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[9519],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1858:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),i=["components"],o={},l=void 0,c={unversionedId:"nx/cypress/init-deployment",id:"nx/cypress/init-deployment",isDocsHomePage:!1,title:"init-deployment",description:"@ensono-stacks/cypress:init-deployment",source:"@site/docs/nx/cypress/init-deployment.md",sourceDirName:"nx/cypress",slug:"/nx/cypress/init-deployment",permalink:"/docs/nx/cypress/init-deployment",tags:[],version:"current",frontMatter:{}},p=[{value:"@ensono-stacks/cypress:init-deployment",id:"ensono-stackscypressinit-deployment",children:[],level:3},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Generator Output",id:"generator-output",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"ensono-stackscypressinit-deployment"},"@ensono-stacks/cypress:init-deployment"),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Add cypress E2E tests to your deployment pipelines"),(0,s.kt)("p",null,"The ",(0,s.kt)("em",{parentName:"p"},"init-deployment")," generator adds e2e testing to pre-existing deployment pipelines, including test reporting and artefact uploads."),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The ",(0,s.kt)("a",{parentName:"li",href:"/docs/nx/workspace/ensono-stacks-workspace#ensono-stacksworkspaceinit-deployment"},"@ensono-stacks/workspace:init-deployment")," has been executed, producing the required deployment files for the workspace")),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"nx g @ensono-stacks/cypress:init-deployment\n")),(0,s.kt)("h3",{id:"generator-output"},"Generator Output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=build/taskctl/tasks.yaml",title:"build/taskctl/tasks.yaml"},'# New e2e:ci task definition will be added to the tasks.yaml, defining what target should be ran for projects when executing the e2e task\ne2e:ci:\n    description: Run e2e tests in ci\n    command:\n      - npx nx affected --base="$BASE_SHA" --target=e2e --parallel=1\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=taskctl.yaml",title:"taskctl.yaml"},"# New e2e:ci task will be added to the taskctl pipeline, adding e2e tests following unit testing\n- task: e2e:ci\n    depends_on: test:ci\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"build/azDevOps/azuredevops-stages.yaml","build/azDevOps/azuredevops-stages.yaml":!0},"# Generate HTML report for all affected projects\n- task: Bash@3\n            condition: and(succeededOrFailed(),eq(variables.HASTESTRESULTS, 'true'))\n            displayName: Generate Reports\n            inputs:\n              targetType: inline\n              script: npx nx affected --base=\"$BASE_SHA\" --target=html-report\n                --configuration=ci --parallel=1\n# New test reporting steps will be added to the azuredevops pipeline\n- task: PublishTestResults@2\n    # Configuration for publishing test results\n- task: PublishPipelineArtifact@1\n    # Configuration for publishing pipeline artefacts\n"))))}d.isMDXComponent=!0}}]);