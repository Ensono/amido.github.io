"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[1988],{5662:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"workloads/azure/backend/netcore/architecture/data_storage_cosmosdb_netcore","title":"Data Storage - CosmosDB","description":".NET Core REST API application - how to use the Ensono Stacks package for CosmosDB document storage","source":"@site/docs/workloads/azure/backend/netcore/architecture/data_storage_comsosdb_netcore.md","sourceDirName":"workloads/azure/backend/netcore/architecture","slug":"/workloads/azure/backend/netcore/architecture/data_storage_cosmosdb_netcore","permalink":"/docs/workloads/azure/backend/netcore/architecture/data_storage_cosmosdb_netcore","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"data_storage_cosmosdb_netcore","title":"Data Storage - CosmosDB","sidebar_label":"Data Storage - CosmosDB","hide_title":true,"hide_table_of_contents":true,"description":".NET Core REST API application - how to use the Ensono Stacks package for CosmosDB document storage","keywords":[".net core","rest api","cqrs","template","cosmos","cosmosdb","data storage","azure","storage","configuration","cosmosdbkey","documentsearch","sql","api","repository","cosmosdb package","dependency injection","stacks"]},"sidebar":"docs","previous":{"title":"Functions And Worker Solution Structure","permalink":"/docs/workloads/azure/backend/netcore/architecture/project_structure/project_structure_netcore_function_worker"},"next":{"title":"Operations, Events, Exceptions and Correlation","permalink":"/docs/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore"}}');var s=t(4848),r=t(8453);const a={id:"data_storage_cosmosdb_netcore",title:"Data Storage - CosmosDB",sidebar_label:"Data Storage - CosmosDB",hide_title:!0,hide_table_of_contents:!0,description:".NET Core REST API application - how to use the Ensono Stacks package for CosmosDB document storage",keywords:[".net core","rest api","cqrs","template","cosmos","cosmosdb","data storage","azure","storage","configuration","cosmosdbkey","documentsearch","sql","api","repository","cosmosdb package","dependency injection","stacks"]},i=void 0,c={},d=[{value:"Data Storage - CosmosDB",id:"data-storage---cosmosdb",level:2},{value:"Summary",id:"summary",level:3},{value:"Introduction",id:"introduction",level:3},{value:"The Problem",id:"the-problem",level:3},{value:"The Solution",id:"the-solution",level:3},{value:"Document Storage",id:"document-storage",level:3},{value:"CosmosDB Implementation",id:"cosmosdb-implementation",level:3},{value:"Usage",id:"usage",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Operation Result",id:"operation-result",level:3},{value:"Unit Tests",id:"unit-tests",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"data-storage---cosmosdb",children:"Data Storage - CosmosDB"}),"\n",(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This guide explains how to use the Ensono Stacks package for CosmosDB document storage with .NET Core REST API applications."}),"\n",(0,s.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Applications need a persistent data store. This project uses Azure Cosmos DB SQL API for document storage."}),"\n",(0,s.jsx)(n.h3,{id:"the-problem",children:"The Problem"}),"\n",(0,s.jsx)(n.p,{children:"Monolith applications use a single database, while microservices have separate data layers, leading to duplicate and inconsistent data access code."}),"\n",(0,s.jsx)(n.h3,{id:"the-solution",children:"The Solution"}),"\n",(0,s.jsx)(n.p,{children:"The Ensono Stacks package provides a reusable data access layer for CosmosDB, reducing boilerplate code and ensuring consistency."}),"\n",(0,s.jsx)(n.h3,{id:"document-storage",children:"Document Storage"}),"\n",(0,s.jsx)(n.p,{children:"The Ensono Stacks package defines abstractions for data access:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IDocumentStorage<TEntity, in TEntityIdentityType>\n    Task<OperationResult<TEntity>> SaveAsync(TEntityIdentityType identifier, string partitionKey, TEntity document, string eTag);\n    Task<OperationResult<TEntity>> GetByIdAsync(TEntityIdentityType identifier, string partitionKey);\n    Task<OperationResult> DeleteAsync(TEntityIdentityType identifier, string partitionKey);\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IDocumentSearch<TEntity>\n    Task<OperationResult<IEnumerable<TResult>>> Search<TResult, TOrderKey>(Expression<Func<TResult, bool>> searchPredicate, Expression<Func<TResult, TOrderKey>> orderPredicate = null, bool isAscendingOrder = true, string partitionKey = null, int pageSize = 20, int pageNumber = 1);\n    Task<OperationResult<IEnumerable<TResult>>> RunSQLQueryAsync<TResult>(string sqlQuery, Dictionary<string, object> parameters = null, string partitionKey = null, int? MaxItemCount = null, string continuationToken = null);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cosmosdb-implementation",children:"CosmosDB Implementation"}),"\n",(0,s.jsx)(n.p,{children:"The Ensono Stacks package implements the document storage using CosmosDB SDK v3."}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"Example repository implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class MenuRepository : IMenuRepository\n{\n    IDocumentStorage<Menu, Guid> documentStorage;\n\n    public MenuRepository(IDocumentStorage<Menu, Guid> documentStorage)\n    {\n        this.documentStorage = documentStorage;\n    }\n\n    public async Task<Menu> GetByIdAsync(Guid id)\n    {\n        var result = await documentStorage.GetByIdAsync(id, id.ToString());\n        return result.Content;\n    }\n\n    public async Task<bool> SaveAsync(Menu entity)\n    {\n        var result = await documentStorage.SaveAsync(entity.Id, entity.Id.ToString(), entity, null);\n        return result.IsSuccessful;\n    }\n\n    public async Task<bool> DeleteAsync(Guid id)\n    {\n        var result = await documentStorage.DeleteAsync(id, id.ToString());\n        return result.IsSuccessful;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,s.jsx)(n.p,{children:"Register the CosmosDB implementation in the IoC container:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public virtual void ConfigureServices(IServiceCollection services)\n{\n    services.Configure<CosmosDbConfiguration>(context.Configuration.GetSection("CosmosDB"));\n    services.AddCosmosDB();\n    services.AddSecrets();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Example ",(0,s.jsx)(n.code,{children:"appsettings.json"})," configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "CosmosDb": {\n        "DatabaseAccountUri": "https://localhost:8081/",\n        "DatabaseName": "Stacks",\n        "SecurityKeySecret": {\n            "Identifier": "COSMOSDBKEY",\n            "Source": "Environment"\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"operation-result",children:"Operation Result"}),"\n",(0,s.jsxs)(n.p,{children:["Operations return an ",(0,s.jsx)(n.code,{children:"OperationResult<T>"})," with:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IsSuccessful"}),": Boolean flag indicating success."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Content"}),": The result content."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Attributes"}),": Additional data like ",(0,s.jsx)(n.code,{children:"ETag"})," and ",(0,s.jsx)(n.code,{children:"RequestCharge"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(n.p,{children:"Ensure your application has tests to verify data serialization and deserialization."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);