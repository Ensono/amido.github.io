"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[5769,4422,8689],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,h=p["".concat(o,".").concat(m)]||p[m]||d[m]||s;return a?n.createElement(h,l(l({ref:t},c),{},{components:a})):n.createElement(h,l({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<s;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8215:function(e,t,a){var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},4426:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(7462),r=a(7294),s=a(2389),l=a(9443);var i=function(){var e=(0,r.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=a(78),u=a(6010),c="tabItem_vU9c";function p(e){var t,a,n,s=e.lazy,l=e.block,p=e.defaultValue,d=e.values,m=e.groupId,h=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),g=(0,o.lx)(v,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(t=null!=p?p:null==(a=f.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(n=f[0])?void 0:n.props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=i(),y=b.tabGroupChoices,w=b.setTabGroupChoices,T=(0,r.useState)(k),x=T[0],_=T[1],N=[],E=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=y[m];null!=O&&O!==x&&v.some((function(e){return e.value===O}))&&_(O)}var R=function(e){var t=e.currentTarget,a=N.indexOf(t),n=v[a].value;n!==x&&(E(t),_(n),null!=m&&w(m,n))},P=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=N.indexOf(e.currentTarget)+1;a=N[n]||N[0];break;case"ArrowLeft":var r=N.indexOf(e.currentTarget)-1;a=N[r]||N[N.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":l},h)},v.map((function(e){var t=e.value,a=e.label;return r.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,u.Z)("tabs__item",c,{"tabs__item--active":x===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:P,onFocus:R,onClick:R},null!=a?a:t)}))),s?(0,r.cloneElement)(f.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function d(e){var t=(0,s.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},9443:function(e,t,a){var n=(0,a(7294).createContext)(void 0);t.Z=n},3697:function(e,t,a){a.r(t),a.d(t,{default:function(){return o}});var n=a(7294),r=a(2004),s="playerSection_9Es-",l="playerWrapper_yguh",i="player_P6CU";var o=function(e){var t=e.url;return n.createElement("div",{className:s},n.createElement("div",{className:l},n.createElement(r.Z,{className:i,url:t,controls:!0,width:"100%",height:"100%",config:{}})))}},3602:function(e,t,a){a.r(t);var n=a(7294);t.default=function(e){var t=e.next,a=e.prev;return n.useEffect((function(){if(t){var e=document.querySelector("div.pagination-nav__item.pagination-nav__item--next>a");e&&e.style&&(e.style.display="none")}if(a){var n=document.querySelector("div.pagination-nav__item>a");n&&n.style&&(n.style.display="none")}})),n.createElement("div",null)}},5699:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return m},toc:function(){return h},default:function(){return v}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),l=a(3602),i=a(4426),o=a(8215),u=a(3697),c=["components"],p={id:"execute_karate_api_tests",title:"Running API tests with Karate",sidebar_label:"REST API testing with Karate",description:"How to test rest api application with karate",keywords:["java","rest","api","karate","run karate tests","karate test example","test runner","karate test report","execute parallel tests","framework","testing","test"]},d=void 0,m={unversionedId:"workloads/azure/backend/java/testing/execute_karate_api_tests",id:"workloads/azure/backend/java/testing/execute_karate_api_tests",isDocsHomePage:!1,title:"Running API tests with Karate",description:"How to test rest api application with karate",source:"@site/docs/workloads/azure/backend/java/testing/execute_karate_api_tests.md",sourceDirName:"workloads/azure/backend/java/testing",slug:"/workloads/azure/backend/java/testing/execute_karate_api_tests",permalink:"/docs/workloads/azure/backend/java/testing/execute_karate_api_tests",tags:[],version:"current",frontMatter:{id:"execute_karate_api_tests",title:"Running API tests with Karate",sidebar_label:"REST API testing with Karate",description:"How to test rest api application with karate",keywords:["java","rest","api","karate","run karate tests","karate test example","test runner","karate test report","execute parallel tests","framework","testing","test"]},sidebar:"docs",previous:{title:"REST API testing with Serenity",permalink:"/docs/workloads/azure/backend/java/testing/execute_serenity_api_tests"},next:{title:"Introduction",permalink:"/docs/workloads/azure/backend/netcore/introduction_netcore"}},h=[{value:"Getting Started",id:"getting-started",children:[{value:"Prerequisites",id:"prerequisites",children:[],level:3}],level:2},{value:"Running the tests",id:"running-the-tests",children:[{value:"Run the specific feature by tag option",id:"run-the-specific-feature-by-tag-option",children:[],level:3},{value:"Switching the Environment",id:"switching-the-environment",children:[],level:3}],level:2},{value:"Running tests in parallel",id:"running-tests-in-parallel",children:[{value:"@parallel=false",id:"parallelfalse",children:[],level:3},{value:"Parallel Stats",id:"parallel-stats",children:[{value:"Note",id:"note",children:[],level:4}],level:3},{value:"Test Reports",id:"test-reports",children:[],level:3}],level:2}],f={toc:h};function v(e){var t=e.components,a=(0,r.Z)(e,c);return(0,s.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,'Karate is an open-source general-purpose test-automation framework that can script calls to HTTP end-points and assert that the JSON or XML responses are as expected. Karate also has support for service-virtualization where it can bring up "mock" (or stub) servers which can substitute for web-services that need to participate in an integration-test. Karate\'s capabilities include being able to run tests in parallel, HTML reports and compatibility with Continuous Integration tools.'),(0,s.kt)("h2",{id:"getting-started"},"Getting Started"),(0,s.kt)("p",null,"This page explains how to setup the API testing framework built with Java and Karate."),(0,s.kt)(u.default,{url:"https://vimeo.com/486755267",mdxType:"ResponsivePlayer"}),(0,s.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("p",null,"Set an environment variable named ",(0,s.kt)("inlineCode",{parentName:"p"},"BASE_URL")," (e.g. if testing locally set it to ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:9000"},"http://localhost:9000"),") or use the ",(0,s.kt)("inlineCode",{parentName:"p"},"export BASE_URL=http://localhost:9000")," command."),(0,s.kt)("h2",{id:"running-the-tests"},"Running the tests"),(0,s.kt)("p",null,"To run all functional tests please navigate to ",(0,s.kt)("inlineCode",{parentName:"p"},"./api-tests-karate")," path and execute the following command:"),(0,s.kt)(i.Z,{groupId:"operating-systems",defaultValue:"unix",values:[{label:"Unix",value:"unix"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"unix",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./mvnw test -Dtest=RunFunctionalTests\n"))),(0,s.kt)(o.Z,{value:"windows",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mvnw.cmd test -Dtest=RunFunctionalTests\n")))),(0,s.kt)("p",null," To run the Smoke tests independently, use:"),(0,s.kt)(i.Z,{groupId:"operating-systems",defaultValue:"unix",values:[{label:"Unix",value:"unix"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"unix",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./mvnw test -Dtest=RunSmokeTests\n"))),(0,s.kt)(o.Z,{value:"windows",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mvnw.cmd test -Dtest=RunSmokeTests\n")))),(0,s.kt)("p",null," Run Functional tests on the specific environment, use:"),(0,s.kt)(i.Z,{groupId:"operating-systems",defaultValue:"unix",values:[{label:"Unix",value:"unix"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"unix",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"./mvnw test -Dtest=RunFunctionalTests -Dkarate.env=local\n"))),(0,s.kt)(o.Z,{value:"windows",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mvnw.cmd test -Dtest=RunFunctionalTests -Dkarate.env=local\n")))),(0,s.kt)("h3",{id:"run-the-specific-feature-by-tag-option"},"Run the specific feature by tag option"),(0,s.kt)("p",null,"Karate allows running tests by a ",(0,s.kt)("a",{parentName:"p",href:"https://intuit.github.io/karate/#tags"},"specific tag"),". To do that please set your tag to the specific feature or test, and then specify it in the Runner Class as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'    @Karate.Test\n    Karate testFullPath() {\n        return Karate.run("classpath:PATH_TO_THE_FEATURE/FEATURE_NAME.feature").tags("@TAG");\n    }\n')),(0,s.kt)("h3",{id:"switching-the-environment"},"Switching the Environment"),(0,s.kt)("p",null,"There is only one thing you need to do to switch the environment - which is to set a Java system property.\nBy default, the value of karate.env when you access it within karate-config.js - is base_url value taken from the environment variables"),(0,s.kt)("h2",{id:"running-tests-in-parallel"},"Running tests in parallel"),(0,s.kt)("p",null,"Choosing the right forking strategy and parallel execution settings can have a substantial impact on the memory requirements and the execution time of the build system.\nThe tests can be easily grouped in features and tags to run and compose test-suites in a very flexible manner."),(0,s.kt)("h3",{id:"parallelfalse"},"@parallel=false"),(0,s.kt)("p",null,"In rare cases you may want to suppress the default of Scenario-s executing in parallel and the special tag @parallel=false can be used. If you place it above the Feature keyword, it will apply to all Scenario-s. And if you just want one or two Scenario-s to NOT run in parallel, you can place this tag above only those Scenario-s."),(0,s.kt)("h3",{id:"parallel-stats"},"Parallel Stats"),(0,s.kt)("p",null,"For convenience, some stats are logged to the console when execution completes, which should look something like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"======================================================\nelapsed:   2.35 | threads:    5 | thread time: 4.98\nfeatures:    54 | ignored:   25 | efficiency: 0.42\nscenarios:  145 | passed:   145 | failed: 0\n======================================================\n")),(0,s.kt)("h4",{id:"note"},"Note"),(0,s.kt)("p",null,' Any *.feature file tagged as @ignore will be skipped - as the ~ prefix means a "NOT" operation.\nYou can also specify tags on the command-line. The tags() method from test runner class also takes multiple arguments,for e.g.'),(0,s.kt)("p",null," ",(0,s.kt)("inlineCode",{parentName:"p"},'this is an "AND" operation: tags("@customer", "@smoke", "~@ignoredTags")')),(0,s.kt)("p",null," ",(0,s.kt)("inlineCode",{parentName:"p"},'and this is an "OR" operation: tags("@customer, @smoke, ~@ignoredTags")')),(0,s.kt)("p",null," The more threads are used, the higher the chances of sporadic, hard-to-reproduce test failures due to timeouts, test data clean up, and other related issues.\nThe added performance gain of each thread also tends to drop off for higher numbers of threads."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'class Runner {\n    @Test\n    void run() {\n        Results results = Runner.path("classpath:PATH_TO_FUTURE_OR_PACKAGE").tags("~@ignoredTags", "@YourTag").parallel(1);\n        assertEquals(0, results.getFailCount(), results.getErrorMessages());\n    }\n}\n')),(0,s.kt)("h3",{id:"test-reports"},"Test Reports"),(0,s.kt)("p",null," As a result of the test execution - karate will automatically generate the test report - ",(0,s.kt)("inlineCode",{parentName:"p"},"target/surefire-reports/karate-summary.html"),"."),(0,s.kt)(l.default,{next:!0,mdxType:"HideNavigation"}))}v.isMDXComponent=!0}}]);