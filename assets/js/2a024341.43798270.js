"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[9973],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return L}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(a),m=r,L=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return a?n.createElement(L,o(o({ref:t},c),{},{components:a})):n.createElement(L,o({ref:t},c))}));function L(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5266:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return L},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],s={id:"example_data_source",title:"Example Data Source",sidebar_label:"5. Example Data Source",hide_title:!1,hide_table_of_contents:!1,description:"Setting up and using the example data source",keywords:["data","sql","azure","testing"]},l=void 0,d={unversionedId:"workloads/azure/data/getting_started/example_data_source",id:"workloads/azure/data/getting_started/example_data_source",title:"Example Data Source",description:"Setting up and using the example data source",source:"@site/docs/workloads/azure/data/getting_started/example_data_source.md",sourceDirName:"workloads/azure/data/getting_started",slug:"/workloads/azure/data/getting_started/example_data_source",permalink:"/docs/workloads/azure/data/getting_started/example_data_source",draft:!1,tags:[],version:"current",frontMatter:{id:"example_data_source",title:"Example Data Source",sidebar_label:"5. Example Data Source",hide_title:!1,hide_table_of_contents:!1,description:"Setting up and using the example data source",keywords:["data","sql","azure","testing"]},sidebar:"docs",previous:{title:"4. Shared Resources Deployment",permalink:"/docs/workloads/azure/data/getting_started/shared_resources_deployment_azure"},next:{title:"6. Data Ingest Pipeline Deployment",permalink:"/docs/workloads/azure/data/getting_started/etl_pipelines_deployment_azure"}},c={},u=[{value:"Example dataset",id:"example-dataset",level:2},{value:"Movies dataset tables DDL",id:"movies-dataset-tables-ddl",level:3}],p={toc:u},m="wrapper";function L(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When deploying a Stacks data platform, you may optionally include an Azure SQL database. This database is intended to be used for experimenting and testing ingest processes with the Stacks data platform. The database will be deployed into the same resource groups as the core data platform resources, named for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SQL server name:")," amidostacksdeveuwdesql.database.windows.net"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SQL database name:")," sqldbtest")),(0,i.kt)("h2",{id:"example-dataset"},"Example dataset"),(0,i.kt)("p",null,"The database can be populated with any dataset you wish for developing and testing Stacks."),(0,i.kt)("p",null,"The examples contained in the Getting Started documentation are based around populating the sample database with data\nfrom ",(0,i.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/rounakbanik/the-movies-dataset"},"The Movies Dataset from Kaggle"),", which contains metadata and ratings for approximately 45,000 movies released\non or before July 2017. These CSV files were loaded into the following tables in the example database:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.credits")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.keywords")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.links")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.links_small")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.movies_metadata")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.ratings")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"movies.ratings_small"))),(0,i.kt)("p",null,"Refer to official Microsoft documentation for steps on loading data from CSV into an Azure SQL database. The DDL for the tables created is provided below. Please note, the database schema design has not been fully optimised for the dataset - this is intentional, to give further opportunity for testing data transformation and quality checks in the platform."),(0,i.kt)("h3",{id:"movies-dataset-tables-ddl"},"Movies dataset tables DDL"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [movies].[credits](\n    [cast] [nvarchar](max) NOT NULL,\n    [crew] [nvarchar](max) NOT NULL,\n    [id] [int] NOT NULL\n)\nGO\nCREATE TABLE [movies].[keywords](\n    [id] [int] NOT NULL,\n    [keywords] [nvarchar](max) NOT NULL\n)\nGO\nCREATE TABLE [movies].[links](\n    [movieId] [int] NOT NULL,\n    [imdbId] [int] NOT NULL,\n    [tmdbId] [int] NULL\n)\nGO\nCREATE TABLE [movies].[links_small](\n    [movieId] [int] NOT NULL,\n    [imdbId] [int] NOT NULL,\n    [tmdbId] [int] NULL\n)\nGO\nCREATE TABLE [movies].[movies_metadata](\n    [adult] [nvarchar](1000) NOT NULL,\n    [belongs_to_collection] [nvarchar](1000) NULL,\n    [budget] [nvarchar](1000) NOT NULL,\n    [genres] [nvarchar](1000) NULL,\n    [homepage] [nvarchar](1000) NULL,\n    [id] [nvarchar](1000) NOT NULL,\n    [imdb_id] [nvarchar](1000) NULL,\n    [original_language] [nvarchar](1000) NULL,\n    [original_title] [nvarchar](1000) NULL,\n    [overview] [nvarchar](1000) NULL,\n    [popularity] [nvarchar](1000) NULL,\n    [poster_path] [nvarchar](1000) NULL,\n    [production_companies] [nvarchar](max) NULL,\n    [production_countries] [nvarchar](max) NULL,\n    [release_date] [nvarchar](1000) NULL,\n    [revenue] [bigint] NULL,\n    [runtime] [nvarchar](1000) NULL,\n    [spoken_languages] [nvarchar](1000) NULL,\n    [status] [nvarchar](1000) NULL,\n    [tagline] [nvarchar](1000) NULL,\n    [title] [nvarchar](1000) NULL,\n    [video] [nvarchar](1000) NULL,\n    [vote_average] [nvarchar](1000) NULL,\n    [vote_count] [smallint] NULL\n)\nGO\nCREATE TABLE [movies].[ratings](\n    [userId] [int] NOT NULL,\n    [movieId] [int] NOT NULL,\n    [rating] [nvarchar](50) NOT NULL,\n    [timestamp] [int] NOT NULL\n)\nGO\nCREATE TABLE [movies].[ratings_small](\n    [userId] [int] NOT NULL,\n    [movieId] [int] NOT NULL,\n    [rating] [nvarchar](50) NOT NULL,\n    [timestamp] [int] NOT NULL\n)\nGO\n")))}L.isMDXComponent=!0}}]);