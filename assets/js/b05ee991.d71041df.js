"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[1995],{7796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(4848),s=t(8453);t(9557);const o={id:"java_mapstruct_mapping",title:"Reducing Bean Mapping Boilerplate",sidebar_label:"Reducing Bean Mapping Boilerplate",description:"Reducing Bean Mapping Boilerplate",keywords:["development","java","backend","server-side"]},r=void 0,i={id:"developer/java/patterns/java_mapstruct_mapping",title:"Reducing Bean Mapping Boilerplate",description:"Reducing Bean Mapping Boilerplate",source:"@site/docs/developer/java/patterns/java_mapstruct_mapping.md",sourceDirName:"developer/java/patterns",slug:"/developer/java/patterns/java_mapstruct_mapping",permalink:"/docs/developer/java/patterns/java_mapstruct_mapping",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"java_mapstruct_mapping",title:"Reducing Bean Mapping Boilerplate",sidebar_label:"Reducing Bean Mapping Boilerplate",description:"Reducing Bean Mapping Boilerplate",keywords:["development","java","backend","server-side"]},sidebar:"docs",previous:{title:"Separation of Concerns",permalink:"/docs/developer/java/patterns/java_app_layering"},next:{title:"Reducing Swagger Annotation Overload",permalink:"/docs/developer/java/patterns/java_swagger_annotations"}},p={},l=[{value:"Context",id:"context",level:2},{value:"Solution",id:"solution",level:2},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Base Mapper Code",id:"base-mapper-code",level:3},{value:"Project Mapper Code",id:"project-mapper-code",level:3},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Unit Test Code",id:"unit-test-code",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,a.jsx)(n.p,{children:"Good programming techniques tell us that we should be following a principle of separation of concerns. This means that as\ndevelopers we often have to shuffle data from one object to another."}),"\n",(0,a.jsx)(n.p,{children:"A common example of this is where we have a Data Transfer Object (DTO) passed as a parameter in a REST API call, and we need to\ncopy the data from object-graph to another, for example into a Domain Object for it to be subsequently persisted. The same\nis required in reverse, when we read an object from the data store we need to convert that object into a DTO that is then\npassed back to the caller."}),"\n",(0,a.jsx)(n.p,{children:"This becomes more complex when we have not only single instances of an object, but we have a collection\nof them."}),"\n",(0,a.jsxs)(n.p,{children:["To be clear, it is bad practice to use the same object (i.e., ",(0,a.jsx)(n.code,{children:"Class<?>"}),") in your code for both of the internal operations\n(managing the domain) and external operations (receiving or passing data to/from a caller) as it makes future change more complex."]}),"\n",(0,a.jsx)(n.p,{children:"The vanilla Java way to approach this is through overloaded constructors or the use of the builder pattern - both of which\ncan become unwieldy as the number of the properties on the class increases. It also means that specific methods need to be\nmanually written to support single objects or lists/collections of objects."}),"\n",(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://mapstruct.org/",children:"Mapstruct"})," open-source project is a code generator that greatly simplifies the implementation of mappings\nbetween Java bean types based on a convention over configuration approach."]}),"\n",(0,a.jsx)(n.p,{children:'The generated mapping code uses plain method invocations and thus is fast, type-safe and easy to understand (this is important,\nas other mappers that use runtime reflection are "black boxes" that need to be executed in order to be debugged).'}),"\n",(0,a.jsx)(n.p,{children:"In addition, there is full support for Spring auto-wiring and Unit Testing."}),"\n",(0,a.jsxs)(n.p,{children:['MapStruct is an "annotation processor" so please make sure this is switched on for your project. Base on your setup, it may also be\nnecessary to ',(0,a.jsx)(n.code,{children:"mvn compile"})," after creating any new mappers."]}),"\n",(0,a.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,a.jsx)(n.p,{children:"MapStruct is capable of working in many ways, although the approach taken in the Ensono Stacks project is to follow the pattern\nwhereby it uses interfaces to define mapper objects. With the addition of some mapper utility functions it means that a\nbean-mapper that supports single objects and collections (in addition to other features such as UUID \u2190\u2192 String auto-conversion)\ncan be created very easily."}),"\n",(0,a.jsx)(n.h3,{id:"base-mapper-code",children:"Base Mapper Code"}),"\n",(0,a.jsxs)(n.p,{children:["The following generic base mapper interface (this is as show at time of writing for example purposes, refer to GitHub for the latest)\nis used to define a standard set of mapping functions and lives in the Ensono Stacks ",(0,a.jsx)(n.code,{children:"core-commons"})," module."]}),"\n",(0,a.jsxs)(n.p,{children:["The generic template placeholder ",(0,a.jsx)(n.code,{children:"D"})," is for the DTO (external) representation and ",(0,a.jsx)(n.code,{children:"E"}),' is for the Entity (internal) representation. As\ncan be seen, this will provide a number of "out of the box" methods such as ',(0,a.jsx)(n.code,{children:"toDto()"}),", ",(0,a.jsx)(n.code,{children:"fromDto()"}),", ",(0,a.jsx)(n.code,{children:"toDtoList()"})," etc."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public interface BaseMapper<D, E> {\n  D toDto(E entity);\n\n  E fromDto(D dto);\n\n  void updateFromDto(D dto, @MappingTarget E entity);\n\n  void updateFromEntity(E entity, @MappingTarget D dto);\n\n  List<D> toDtoList(List<E> list);\n\n  List<E> fromDtoList(List<D> list);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"In addition to this, some mapping utility functions are included. Some Ensono Stacks modules use a UUID as the external representation\nof an ID whereas internally it uses a String (for persistence)."}),"\n",(0,a.jsx)(n.p,{children:"The mapping utility class is currently structured as follows. This has simple functions that MapStruct will use whenever\nit needs to convert between these data types."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class MapperUtils {\n\n  private MapperUtils() {\n    // Utility class\n  }\n\n  public static UUID map(String value) {\n    return (value != null && !value.trim().isEmpty()) ? fromString(value) : null;\n  }\n\n  public static String map(UUID uuid) {\n    return uuid != null ? uuid.toString() : null;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"project-mapper-code",children:"Project Mapper Code"}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example 1"}),"\n",(0,a.jsx)(n.p,{children:"Whenever a higher-level module (such as project code) requires a mapper between beans (or object-graphs) the implementation is a simple interface\nthat extends the base mapper and imports (or uses) the mapping utility class shown above."}),"\n",(0,a.jsxs)(n.p,{children:["A simple mapper is as follows. This mapper maps between ",(0,a.jsx)(n.code,{children:"MenuDTO"})," and a ",(0,a.jsx)(n.code,{children:"Menu"})," domain object."]}),"\n",(0,a.jsxs)(n.p,{children:['It can be seen that it also "uses" another mapper (so that an entire object hierarchy) can be converted in one go, and also\nuses the ',(0,a.jsx)(n.code,{children:"MapperUtils"})," class that supports the conversion from UUID to String data types."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Mapper(\n    componentModel = "spring",\n    uses = {MapperUtils.class, CategoryMapper.class},\n    nullValueCheckStrategy = NullValueCheckStrategy.ALWAYS)\npublic interface MenuMapper extends BaseMapper<MenuDTO, Menu> {}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"Example 2"}),"\n",(0,a.jsxs)(n.p,{children:["A more complex mapper is shown below. This mapper maps between a top-level Ensono Stacks ",(0,a.jsx)(n.code,{children:"CreateMenuRequest"})," DTO and related domain object\ncalled ",(0,a.jsx)(n.code,{children:"CreateMenuCommand"}),". The name of fields differs between these two objects, so it is necessary in this instance to\noverload the ",(0,a.jsx)(n.code,{children:"toDto()"})," and ",(0,a.jsx)(n.code,{children:"fromDto()"})," methods to tell MapStruct how to map between the fields."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Mapper(\n    componentModel = "spring",\n    uses = {},\n    nullValueCheckStrategy = NullValueCheckStrategy.ALWAYS)\npublic interface CreateMenuMapper extends BaseMapper<CreateMenuRequest, CreateMenuCommand> {\n\n  @Override\n  @Mapping(source = "restaurantId", target = "tenantId")\n  CreateMenuRequest toDto(CreateMenuCommand command);\n\n  @Override\n  @Mapping(source = "tenantId", target = "restaurantId")\n  CreateMenuCommand fromDto(CreateMenuRequest request);\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"unit-test-code",children:"Unit Test Code"}),"\n",(0,a.jsx)(n.p,{children:"As previously mentioned, MapStruct has full support for Spring Boot testing frameworks such as JUnit."}),"\n",(0,a.jsx)(n.p,{children:"To use any mappers that have been created structure your tests as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Tag("Unit")\n@SpringBootTest(\n    classes = {\n      MenuMapper.class,\n      MenuMapperImpl.class,\n      ...\n    })\nclass DomainToDtoMapperMapstructTest {\n\n  @Autowired private MenuMapper menuMapper;\n\n  ...\n  \n   @Test\n  void menuToMenuDto() {\n\n    // Given\n    UUID id = randomUUID();\n    UUID restaurantId = randomUUID();\n    ...\n\n    Menu menu =\n        new Menu(\n            id.toString(),\n            restaurantId.toString(),\n            ...);\n\n    // When\n    MenuDTO menuDTO = menuMapper.toDto(menu);\n\n    // Then\n    assertThat(menuDTO.getId()).isEqualTo(id);\n    assertThat(menuDTO.getRestaurantId()).isEqualTo(restaurantId);\n    ...\n  }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},9557:(e,n,t)=>{t.d(n,{A:()=>o});var a=t(6540),s=t(4848);const o=e=>{let{next:n,prev:t}=e;return a.useEffect((()=>{if(n){const e=document.querySelector("div.pagination-nav__item.pagination-nav__item--next>a");e&&e.style&&(e.style.display="none")}if(t){const e=document.querySelector("div.pagination-nav__item>a");e&&e.style&&(e.style.display="none")}})),(0,s.jsx)("div",{})}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);