"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[9349],{6694:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var n=s(4848),i=s(8453);const a={},r=void 0,l={id:"getting_started/playwright/visual-regression-deployment",title:"visual-regression-deployment",description:"@ensono-stacks/playwright:visual-regression-deployment",source:"@site/docs/getting_started/playwright/visual-regression-deployment.md",sourceDirName:"getting_started/playwright",slug:"/getting_started/playwright/visual-regression-deployment",permalink:"/docs/getting_started/playwright/visual-regression-deployment",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{}},o={},d=[{value:"@ensono-stacks/playwright",id:"ensono-stacksplaywright",level:3},{value:"Usage",id:"usage",level:2},{value:"Command line arguments",id:"command-line-arguments",level:3},{value:"Generator Output",id:"generator-output",level:3},{value:"Playwright with native visual comparisons",id:"playwright-with-native-visual-comparisons",level:4},{value:"Playwright with Applitools Eyes",id:"playwright-with-applitools-eyes",level:4}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h3,{id:"ensono-stacksplaywright",children:["@ensono-stacks/playwright",":visual-regression-deployment"]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Configure visual regression testing within your deployment pipeline"}),(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.em,{children:"visual-regression-deployment"})," generator configures your pipeline to enable visual regression testing either natively, or through a cloud based provider."]}),(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"nx g @ensono-stacks/playwright:visual-regression-deployment\n"})}),(0,n.jsxs)(t.p,{children:["Upon calling the ",(0,n.jsx)(t.em,{children:"visual-regression-deployment"})," generator you will be presented with a number of options:"]}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["What type of visual regression tests would you like to use?","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"native"}),"\n",(0,n.jsx)(t.li,{children:"applitools"}),"\n"]}),"\n"]}),"\n"]}),(0,n.jsxs)(t.p,{children:["You should select the type of visual regression tests which you created through the ",(0,n.jsxs)(t.a,{href:"/docs/getting_started/playwright/ensono-stacks-playwright#ensono-stacksplaywrightvisual-regression",children:["@ensono-stacks/playwright",":visual-regression"]})," generator."]}),(0,n.jsx)(t.h3,{id:"command-line-arguments",children:"Command line arguments"}),(0,n.jsx)(t.p,{children:"The following command line arguments are available:"}),(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Option"}),(0,n.jsx)(t.th,{children:"Description"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Accepted Values"}),(0,n.jsx)(t.th,{children:"Default"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"--type, -t"}),(0,n.jsx)(t.td,{children:"Method used to conduct visual testing"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:'[choices: "native", "applitools"]'}),(0,n.jsx)(t.td,{children:"none"})]})})]}),(0,n.jsx)(t.h3,{id:"generator-output",children:"Generator Output"}),(0,n.jsx)(t.h4,{id:"playwright-with-native-visual-comparisons",children:"Playwright with native visual comparisons"}),(0,n.jsxs)(t.p,{children:["Opting to scaffold ",(0,n.jsx)(t.strong,{children:"native"})," visual testing will make a number of amendments to your test projects configuration:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-text",metastring:'title="Generated files"',children:".\r\n\u251c\u2500\u2500 build\r\n\u2502   \u251c\u2500\u2500 azDevOps\r\n\u2502   \u2502   \u251c\u2500\u2500 azuredevops-updatesnapshots.yaml #Pipeline to capture and update baseline images within the CI\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n"})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",metastring:'title="build/taskctl/tasks.yaml"',children:'# New update snapshots task definition to update snapshots for all affected projects\r\ne2e:updatesnapshots:\r\n    description: Run e2e snapshot updates in ci\r\n    command:\r\n      - npx nx affected --base="$BASE_SHA" --target=e2e --parallel=1\r\n        --skip-nx-cache --update-snapshots --grep @visual-regression\n'})}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",metastring:'title="taskctl.yaml"',children:"# Update snapshots task added to taskctl.yaml which can be called by adding a comment to pull requests\r\nupdatesnapshots:\r\n    - task: e2e:updatesnapshots\n"})}),(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["Visit the ",(0,n.jsx)(t.a,{href:"../../testing/testing_in_nx/playwright_visual_testing#updating-your-baseline-images",children:"Updating your baseline images\u200b"})," documentation for further details!"]})}),(0,n.jsx)(t.h4,{id:"playwright-with-applitools-eyes",children:"Playwright with Applitools Eyes"}),(0,n.jsxs)(t.p,{children:["Opting to scaffold visual testing with ",(0,n.jsx)(t.strong,{children:"applitools"})," will make a small change your test projects configuration:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",metastring:'title="build/azDevOps/azuredevops-stages.yaml"',children:"- task: AzureCLI@2\r\n    displayName: build_deployment_${{ parameters.environment }}\r\n        env:\r\n            GH_TOKEN: $(GH_TOKEN)\r\n            APPLITOOLS_API_KEY: $(APPLITOOLS_API_KEY) # API key for applitools api added\n"})}),(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["Visit the ",(0,n.jsx)(t.a,{href:"/docs/testing/testing_in_nx/playwright_visual_testing_applitools_eyes",children:(0,n.jsx)(t.code,{children:"Playwright with Applitools Eyes"})})," documentation for further details!"]})})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(6540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);