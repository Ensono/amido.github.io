"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[7870],{3905:function(t,e,n){n.d(e,{Zo:function(){return g},kt:function(){return c}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},g=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,s=t.parentName,g=i(t,["components","mdxType","originalType","parentName"]),u=p(n),m=a,c=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(c,o(o({ref:e},g),{},{components:n})):r.createElement(c,o({ref:e},g))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1308:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return g},default:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],i={},s=void 0,p={unversionedId:"nx/logger/winston",id:"nx/logger/winston",isDocsHomePage:!1,title:"winston",description:"@ensono-stacks/logger:winston",source:"@site/docs/nx/logger/winston.md",sourceDirName:"nx/logger",slug:"/nx/logger/winston",permalink:"/docs/nx/logger/winston",tags:[],version:"current",frontMatter:{}},g=[{value:"@ensono-stacks/logger:winston",id:"ensono-stacksloggerwinston",children:[],level:3},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Command line arguments",id:"command-line-arguments",children:[],level:3},{value:"Generator Output",id:"generator-output",children:[],level:3},{value:"Importing the logger into your app",id:"importing-the-logger-into-your-app",children:[],level:3},{value:"Other resources",id:"other-resources",children:[],level:3}],level:2}],u={toc:g};function d(t){var e=t.components,n=(0,a.Z)(t,o);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"ensono-stacksloggerwinston"},"@ensono-stacks/logger:winston"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Add Winston to your project"),"Generates a new Nx library which contains a Winston logger instance and associated config.",(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"An existing Stacks workspace."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nx g @ensono-stacks/logger:winston\n")),(0,l.kt)("h3",{id:"command-line-arguments"},"Command line arguments"),(0,l.kt)("p",null,"The following command line arguments are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Accepted Values"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Available in interactive prompt?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--name"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the generated library"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--tags"),(0,l.kt)("td",{parentName:"tr",align:null},"Add tags to the project (used for linting)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--directory"),(0,l.kt)("td",{parentName:"tr",align:null},"Directory where the project is placed (within Nx libs directory)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--skipFormat"),(0,l.kt)("td",{parentName:"tr",align:null},"Skip formatting files"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--logLevelType"),(0,l.kt)("td",{parentName:"tr",align:null},"The type of log levels that will be used"),(0,l.kt)("td",{parentName:"tr",align:null},"enum"),(0,l.kt)("td",{parentName:"tr",align:null},"cli/syslog/npm"),(0,l.kt)("td",{parentName:"tr",align:null},"npm"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--consoleLogs"),(0,l.kt)("td",{parentName:"tr",align:null},"Output logs to the console"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--fileTransportPath"),(0,l.kt)("td",{parentName:"tr",align:null},"File path used for logs transport"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransport"),(0,l.kt)("td",{parentName:"tr",align:null},"Add a http transport"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportHost"),(0,l.kt)("td",{parentName:"tr",align:null},"Remote host of the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportPort"),(0,l.kt)("td",{parentName:"tr",align:null},"Remote port of the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportPath"),(0,l.kt)("td",{parentName:"tr",align:null},"Remote URI of the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--httpTransportSSL"),(0,l.kt)("td",{parentName:"tr",align:null},"Use SSL for the HTTP logging endpoint"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true/false"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"--streamPath"),(0,l.kt)("td",{parentName:"tr",align:null},"Stream transport path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"generator-output"},"Generator Output"),(0,l.kt)("p",null,"The generator will create a new application within your libs folder with the following structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},".\n\u251c\u2500\u2500 libs/[libname]\n\u2502   \u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 index.ts // Contains the Winston configuration and creates the logger instance\n\u2502   \u251c\u2500\u2500 \u251c\u2500\u2500 index.test.ts // Tests for the logger\n\u2502   \u251c\u2500\u2500 .eslintrc.json // ESLint config - extends from workspace config\n\u2502   \u251c\u2500\u2500 jest.config.ts // Jest config - extends from workspace config\n\u2502   \u251c\u2500\u2500 project.json // Nx config file for the library\n\u2502   \u251c\u2500\u2500 tsconfig.json // Main Typescript config for the library - extends workspace config & references the below two tsconfig files\n\u2502   \u251c\u2500\u2500 tsconfig.lib.json // Typescript config for the library's source files (excluding tests)\n\u2502   \u251c\u2500\u2500 tsconfig.spec.json // Typescript config for the library's test files\n\u2502   \u251c\u2500\u2500 README.md // Information on the library and how to run scripts\n\u251c\u2500\u2500 jest.config.ts // Workspace-level Jest config - created if this does not already exist\n\u2514\u2500\u2500 jest.preset.ts // Workspace-leve Jest preset that extends `@nrwl/jest/preset` - created if this does not already exist.\n\n")),(0,l.kt)("p",null,"Additionally, the following files will be modified"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},".\n\u251c\u2500\u2500 nx.json // Adds configuration for Jest tests if this has not already been done by another generator\n\u251c\u2500\u2500 package.json // Adds winston as a dependency\n\u2514\u2500\u2500 tsconfig.base.json // Adds new library into `paths` field\n\n")),(0,l.kt)("h3",{id:"importing-the-logger-into-your-app"},"Importing the logger into your app"),(0,l.kt)("p",null,"Having created a logger using the above ",(0,l.kt)("a",{parentName:"p",href:"#usage"},"command"),", import the Winston logger instance from the newly created library (the import name can be found within the ",(0,l.kt)("inlineCode",{parentName:"p"},"tsconfig.base.json")," files ",(0,l.kt)("inlineCode",{parentName:"p"},"paths")," field) into your application:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import logger from '@workspace-name/mynewlogger'\n\nlogger.log({\n    level: 'info',\n    message: 'I love Ensono Stacks!', \n})\n")),(0,l.kt)("p",null,"To change how Winston is configured, edit the created library:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=./libs/mynewlogger/src/index.ts",title:"./libs/mynewlogger/src/index.ts"},"const logger = winston.createLogger(logConfiguration);\n\n// Custom transport for non-production\nif (process.env.NODE_ENV !== 'production') {\n    logger.add(new winston.transports.Console({\n        format: winston.format.simple(), \n    })) \n} \n \nexport default logger;\n")),(0,l.kt)("h3",{id:"other-resources"},"Other resources"),(0,l.kt)("p",null,"Documentation for Winston can be found ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/winstonjs/winston"},"here"),".")))}d.isMDXComponent=!0}}]);