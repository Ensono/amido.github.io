"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[2323],{1057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=n(4848),o=n(8453);const r={id:"operations_events_exceptions_correlation_netcore",title:"Operations, Events, Exceptions and Correlation",sidebar_label:"Operations, Events, Exceptions and Correlation",hide_title:!1,hide_table_of_contents:!1,description:".NET Core REST API application - Operations, Events, Exceptions and Correlation",keywords:[".net core","rest api","cqrs","example","template","repository","structure","operations","events","exceptions","correlation"]},s=void 0,a={id:"workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore",title:"Operations, Events, Exceptions and Correlation",description:".NET Core REST API application - Operations, Events, Exceptions and Correlation",source:"@site/docs/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore.md",sourceDirName:"workloads/azure/backend/netcore/architecture",slug:"/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore",permalink:"/docs/workloads/azure/backend/netcore/architecture/operations_events_exceptions_correlation_netcore",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"operations_events_exceptions_correlation_netcore",title:"Operations, Events, Exceptions and Correlation",sidebar_label:"Operations, Events, Exceptions and Correlation",hide_title:!1,hide_table_of_contents:!1,description:".NET Core REST API application - Operations, Events, Exceptions and Correlation",keywords:[".net core","rest api","cqrs","example","template","repository","structure","operations","events","exceptions","correlation"]},sidebar:"docs",previous:{title:"Data Storage - CosmosDB",permalink:"/docs/workloads/azure/backend/netcore/architecture/data_storage_cosmosdb_netcore"},next:{title:"Swagger",permalink:"/docs/workloads/azure/backend/netcore/architecture/swagger_configuration/configure_swagger_netcore"}},c={},d=[{value:"Triggers",id:"triggers",level:3},{value:"Operations",id:"operations",level:3},{value:"Operation Types",id:"operation-types",level:4},{value:"Commands",id:"commands",level:5},{value:"Queries",id:"queries",level:5},{value:"Events",id:"events",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Correlation",id:"correlation",level:3},{value:"OperationCode",id:"operationcode",level:3},{value:"Unique Ids and Codes (exceptions, events and operations codes)",id:"unique-ids-and-codes-exceptions-events-and-operations-codes",level:3}];function l(e){const t={admonition:"admonition",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This document purpose is to clarify concepts implemented in the platform in order to facilitate the monitoring and management of services deployed to the platform."}),"\n",(0,i.jsx)(t.p,{children:"The entire platform will provide monitoring data via logs and metrics to the monitoring tools and requires a consistent approach across services to simplify building dashboards, report generation and alerts configuration."}),"\n",(0,i.jsx)(t.p,{children:"Having a clear understanding of these concepts is crucial to make the platform consistent and simple for maintenance purposes."}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"triggers",children:"Triggers"}),"\n",(0,i.jsx)(t.p,{children:"A trigger mechanism is required to initiate an operation. The trigger is the initiator event received from external systems or triggered internally to notify something has happened or is about to happen."}),"\n",(0,i.jsx)(t.p,{children:"The common triggers are:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"HTTP Request:"})," An HTTP request to a RESTful API endpoint is a trigger sent to the API to initiate an operation."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Queue or Topic Message:"})," A message received from a queue or topic, in form of a command or event that will trigger some processing within the application."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Scheduled Job:"})," An stand alone application or function that executes on a defined schedule to execute a task and is considered complete when the operation finishes."]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"operations",children:"Operations"}),"\n",(0,i.jsx)(t.p,{children:"Everything that happens within an application happens in the context of one operation, an operation will start in response from a trigger, execute and notify its completion with an event(and a response in case of synchronous operation)."}),"\n",(0,i.jsx)(t.h4,{id:"operation-types",children:"Operation Types"}),"\n",(0,i.jsx)(t.h5,{id:"commands",children:"Commands"}),"\n",(0,i.jsx)(t.p,{children:"An operation that modifies one or multiple resource in the application. Commands can be synchronous and may return a result(if one is required) to the caller in form of a response, or asynchronous without a return result, the outcome of the asynchronous command should always be published as an event for any outcome(successful or failed results)."}),"\n",(0,i.jsx)(t.h5,{id:"queries",children:"Queries"}),"\n",(0,i.jsx)(t.p,{children:"Are operations that does not modify the resources in the application. It intend to retrieve data from the application but should also raise events in order to generate insights into user behaviour for platform improvement."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Example:"}),"\nHow many times the user make use of a feature (search invoice, page search results, and so on). Queries will probably also generate data in form of exceptions when the user does not permission to execute operations, for security, auditing and monitoring purposes."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"All Commands and Queries must raise events in order to generate enough data for observability and behaviour analysis by data platform team."})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"events",children:"Events"}),"\n",(0,i.jsx)(t.p,{children:"Application events are generated by the application to notify external services that an action has taken place. The event will notify if an operation completed successfully or failed and should contain the required context information to identify the resource changed(if any), the operation which raised the event and possibly the user id who requested it."}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"exceptions",children:"Exceptions"}),"\n",(0,i.jsx)(t.p,{children:"Exceptions is an execution flow mechanism used to interrupt the current processing flow either because, the application or one of it\u2019s dependent components behaved unexpectedly and can\u2019t proceed, or an application logic is aware it can\u2019t proceed because doing so will/may cause issues. All exceptions raised in an application or it\u2019s dependencies are logged by the infrastructure components, so adding a log information to notify an exception has happened is not required and will make the logging redundant."}),"\n",(0,i.jsx)(t.p,{children:"Exceptions raised by the application must be specific and uniquely identifiable across the platform and must clearly describe the problem that caused the exception. Generic exceptions should be avoided because they will first difficult to implement proper exception handling logic in the application, and also will make difficult to aggregate recurrent exception in the logging platform. Having unique exception will facilitate aggregating common issues for monitoring and alerting."}),"\n",(0,i.jsx)(t.p,{children:"Exceptions types can be classified as Application, Infrastructure or BCL."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Application:"})," Exceptions raised by the application to interruption of an operation in case the state of a resource or the user permissions are not valid for complete the operation. These are commonly mapped to business requirements implemented as a code into the application logic."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Infrastructure:"})," Exceptions raised by base packages used to support the application, they provide useful information to the application to handle issues that it can\u2019t handle by itself. These exceptions in general are related to data access problems, messaging and communication issues implemented into these base packages. The application can either handle these exceptions and provide a custom exception specific for the application, or let the infrastructure exception propagate and provide to the user a generic error message."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"BCL:"})," Are base exceptions raised by dotnet framework are commonly being propagated to the application code to notify unexpected execution of some base class library code, like failure to convert type, Invalid Operations and so on. In general these exception should handled properly in the application to prevent propagating to the user, giving them a more useful information."]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"correlation",children:"Correlation"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Definition:"})," Unique identifier used to track a triggered operation and it's chain of events and exceptions."]}),"\n",(0,i.jsx)(t.p,{children:"Usage: Every operation triggered by an event needs to be identified individually, to make this possible, we assign a CorrelationId to the operation, so in case two events trigger an operation, we could identify the chain of events and exceptions triggered by these events using each one CorrelationId."}),"\n",(0,i.jsx)(t.p,{children:"CorrelationId can be either used for the entire flow of a process or split into CorrelationId per stage."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"CreateOrder operation is triggered by the customer at checkout of an e-commerce, this operation will raise OrderCreated"}),"\n",(0,i.jsx)(t.li,{children:"The Stock application will get the event raised by the checkout application and trigger the ReserveStock command"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In both cases, a single trigger raised two operations as part of a workflow, using a single correlation in both phases of this workflow would make much easier to track all events in a chain of events across different systems, on the other hand, this approach makes all events have the same CorrelationId and in a very verbose systems might get very bloated, another scenarios are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The correlationId is provided by the client that didn't get a response on time and timed out, retrying the request using the same CorrelationId"}),"\n",(0,i.jsx)(t.li,{children:"An event might be processed by multiple handlers at same time, creating a chain of events interlaced by different handlers"}),"\n",(0,i.jsx)(t.li,{children:"The handling of the message can't complete because of the state of the application, connectivity or other issues, re-attempting to process the event using the same CorrelationId"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In these scenarios, would be useful to generate one Correlation per phase."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"CreateOrder generates a correlationId and pass it to the event Raised"}),"\n",(0,i.jsx)(t.li,{children:"ReserveStock capture the original event CorrelationId and Log the transition between the old and new before handling the event with a new correlation"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The current sample solution implements one CorrelationId for the entire flow, is up to the implementer to decide how they want to track the correlation between services"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"operationcode",children:"OperationCode"}),"\n",(0,i.jsx)(t.p,{children:"Definition: Unique code used to track an operation type."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Usage:"})," Every operation has a type."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Example:"})," Create Item, Delete Item, Update Item, Query for Items and so on. Each of these types will be given a code that will be used by the logging handler to record the chain of events, exceptions or other information generated by an operation. The code is useful to de-couple the Operation name from other resources."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The Command UpdateItem can raise the ItemUpdated event when succeeded, if the Item does not exist an exception ItemDoesNotExistException is raised."}),"\n",(0,i.jsx)(t.li,{children:"The Command ReserveItem can raise the ItemUpdated and ItemSoldOut event when succeeded, if the Item does not exist an exception ItemDoesNotExistException is raised."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"In both cases, the same application events and exceptions can be raised, but both are part of different contexts, one is updating the item directly and the other indirectly."}),"\n",(0,i.jsx)(t.p,{children:"Adding the OperationCode to these events, make it easier to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Identify the context of an event or exception"}),"\n",(0,i.jsx)(t.li,{children:"Group and track events or exceptions generally raised by one Operation type"}),"\n",(0,i.jsx)(t.li,{children:"Prevent operations with same name in different contexts to be considered the same"}),"\n",(0,i.jsx)(t.li,{children:"Simplify the tracking of existing operations by Having centralized list of operation codes"}),"\n"]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.h3,{id:"unique-ids-and-codes-exceptions-events-and-operations-codes",children:"Unique Ids and Codes (exceptions, events and operations codes)"}),"\n",(0,i.jsx)(t.p,{children:"As described above, an application will create or handle operations, events and exceptions that will generates log entries in the logging platform. These log entries will be used to generate reports and alerts, in order to do so, they must be uniquely identifiable or easily aggregated to produce useful reports."}),"\n",(0,i.jsx)(t.p,{children:"Exceptions, Events and possibly Operations names might conflict with names defined into different domains (i.e: AddAttachment command, AttachmentAdded event). Using the Full qualified name with a namespace would be a simple way to differentiate each domain related activity, but in some cases, like base packages shared by multiple services, exceptions or events might have the same namespaces, and it will make difficult to easily track their relationships."}),"\n",(0,i.jsx)(t.p,{children:"Another scenario is linking exceptions and events to operations that triggered these, we could correlate them by the correlation id and tracking the operation who started the operation, another alternative is annotate the logs with the operation name."}),"\n",(0,i.jsx)(t.p,{children:"To simplify these complexities, we will add unique ids and codes to exceptions, events and operations in order to uniquely identify them. These ids will be attached to all log entries for:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Link events and exceptions to operations that triggered then. Simplifying reporting, monitoring and alerting processes."}),"\n",(0,i.jsx)(t.li,{children:"Reduce the size of log entries from a long name, to an integer."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);