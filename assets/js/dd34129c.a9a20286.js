"use strict";(self.webpackChunkstacks=self.webpackChunkstacks||[]).push([[1027],{1470:(e,n,t)=>{t.d(n,{A:()=>C});var s=t(6540),o=t(4164),i=t(3104),r=t(6347),a=t(205),c=t(7485),l=t(1682),h=t(679);function d(e){var n,t;return null!=(n=null==(t=s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=null!=n?n:function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:o}}=e;return{value:n,label:t,attributes:s,default:o}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function j(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const o=(0,r.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,c.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}),[i,o])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,i=u(e),[r,c]=(0,s.useState)((()=>function(e){var n;let{defaultValue:t,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!j({value:t,tabValues:s}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+s.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}const o=null!=(n=s.find((e=>e.default)))?n:s[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[l,d]=m({queryString:t,groupId:o}),[p,x]=function(e){let{groupId:n}=e;const t=function(e){return e?"docusaurus.tab."+e:null}(n),[o,i]=(0,h.Dv)(t);return[o,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),g=(()=>{const e=null!=l?l:p;return j({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{g&&c(g)}),[g]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!j({value:e,tabValues:i}))throw new Error("Can't select invalid tab value="+e);c(e),d(e),x(e)}),[d,x,i]),tabValues:i}}var x=t(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(4848);function b(e){let{className:n,block:t,selectedValue:s,selectValue:r,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),h=e=>{const n=e.currentTarget,t=c.indexOf(n),o=a[t].value;o!==s&&(l(n),r(o))},d=e=>{var n;let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{var s;const n=c.indexOf(e.currentTarget)+1;t=null!=(s=c[n])?s:c[0];break}case"ArrowLeft":{var o;const n=c.indexOf(e.currentTarget)-1;t=null!=(o=c[n])?o:c[c.length-1];break}}null==(n=t)||n.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,v.jsx)("li",Object.assign({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{c.push(e)},onKeyDown:d,onClick:h},i,{className:(0,o.A)("tabs__item",g.tabItem,null==i?void 0:i.className,{"tabs__item--active":s===n}),children:null!=t?t:n}),n)}))})}function f(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=p(e);return(0,v.jsxs)("div",{className:(0,o.A)("tabs-container",g.tabList),children:[(0,v.jsx)(b,Object.assign({},n,e)),(0,v.jsx)(f,Object.assign({},n,e))]})}function C(e){const n=(0,x.A)();return(0,v.jsx)(y,Object.assign({},e,{children:d(e.children)}),String(n))}},4781:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/cosmosdb_emulator_1-eb5c6355a0662db45234724a920edac3.png"},7743:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/cosmosdb_emulator_3-821be5075634ccf7ef24132b150ae0c9.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var s=t(4164);const o={tabItem:"tabItem_Ymn6"};var i=t(4848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,r),hidden:t,children:n})}},9629:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>j,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore","title":"Configure REST API with CQRS project","description":"Configure, Build and run .NET Core REST API application with CQRS on local and docker container","source":"@site/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore.md","sourceDirName":"workloads/azure/backend/netcore/quickstart/web_api_cqrs","slug":"/workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore","permalink":"/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/configure_project_netcore","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"configure_project_netcore","title":"Configure REST API with CQRS project","hide_title":true,"sidebar_label":"Configure REST API with CQRS project","hide_table_of_contents":true,"description":"Configure, Build and run .NET Core REST API application with CQRS on local and docker container","keywords":[".net core","rest api","cqrs","azure","application insights","cosmos db","aws sns","build","run","application","configure","docker"]},"sidebar":"docs","previous":{"title":"Create REST API with CQRS project","permalink":"/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/create_project_netcore"},"next":{"title":"Build & Run REST API with CQRS","permalink":"/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/build_and_run_project_netcore"}}');var o=t(4848),i=t(8453),r=t(1470),a=t(9365);const c={id:"configure_project_netcore",title:"Configure REST API with CQRS project",hide_title:!0,sidebar_label:"Configure REST API with CQRS project",hide_table_of_contents:!0,description:"Configure, Build and run .NET Core REST API application with CQRS on local and docker container",keywords:[".net core","rest api","cqrs","azure","application insights","cosmos db","aws sns","build","run","application","configure","docker"]},l=void 0,h={},d=[{value:"Configure REST API with CQRS project",id:"configure-rest-api-with-cqrs-project",level:2},{value:"Configure your database",id:"configure-your-database",level:3},{value:"Configure an in-memory database",id:"configure-an-in-memory-database",level:4},{value:"Configure an Azure Cosmos DB database",id:"configure-an-azure-cosmos-db-database",level:4},{value:"Configuring DynamoDB",id:"configuring-dynamodb",level:4},{value:"Configure your messaging service",id:"configure-your-messaging-service",level:3},{value:"Configure Azure Event Hub",id:"configure-azure-event-hub",level:4},{value:"Configure Azure Service Bus",id:"configure-azure-service-bus",level:4},{value:"Configuring AWS Simple Notification Service",id:"configuring-aws-simple-notification-service",level:4}];function u(e){const n={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"configure-rest-api-with-cqrs-project",children:"Configure REST API with CQRS project"}),"\n",(0,o.jsxs)(n.p,{children:["To configure the REST API with CQRS project, you will need to set up two services: a ",(0,o.jsx)(n.em,{children:"storage service"})," and a ",(0,o.jsx)(n.em,{children:"messaging service"}),". In the first part of this guide, ",(0,o.jsx)(n.a,{href:"https://stacks.ensono.com/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/create_project_netcore",children:"Create REST API with CQRS project"}),", when you ran the ",(0,o.jsx)(n.code,{children:"dotnet new"})," command, you chose a database and a messaging service. Now we will configure the services that you selected."]}),"\n",(0,o.jsx)(n.h3,{id:"configure-your-database",children:"Configure your database"}),"\n",(0,o.jsxs)(n.p,{children:["When you created your project using the Stacks ",(0,o.jsx)(n.code,{children:"dotnet new"})," command, you had the option to choose a database using either the ",(0,o.jsx)(n.code,{children:"-db"})," or ",(0,o.jsx)(n.code,{children:"--database"})," switch. Your options were an in-memory database, Microsoft Azure Cosmos DB or Amazon Web Services DynamoDB. Follow the relevant guide below based on your choice."]}),"\n",(0,o.jsx)(n.h4,{id:"configure-an-in-memory-database",children:"Configure an in-memory database"}),"\n",(0,o.jsxs)(n.p,{children:["The in-memory database requires no additional setup since it holds all data in memory without connecting to an external service. While useful for demonstration purposes, it is ",(0,o.jsx)(n.em,{children:"not"})," suitable for production workloads."]}),"\n",(0,o.jsx)(n.h4,{id:"configure-an-azure-cosmos-db-database",children:"Configure an Azure Cosmos DB database"}),"\n",(0,o.jsxs)(n.p,{children:["To configure Cosmos DB, we need to set the ",(0,o.jsx)(n.code,{children:"CosmosDb:DatabaseAccountUri"})," setting in the ",(0,o.jsx)(n.code,{children:"appsettings.json"})," file and create an environment variable for the database's Primary Key.  You may run the database locally or connect to an existing Cosmos DB instance in Azure. Follow one of the guides below, depending on your choice."]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Run Cosmos DB locally using the emulator, (Windows only)."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Use the Cosmos DB emulator."}),(0,o.jsx)(n.br,{}),"\n","Follow the ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/cosmos-db/how-to-develop-emulator?tabs=windows%2Ccsharp&pivots=api-nosql",children:"instructions provided by Microsoft"})," to install and start the emulator.",(0,o.jsx)(n.br,{}),"\n","The Cosmos DB emulator is only available for the Windows operating system. Mac and Linux users should follow the instructions below to run Cosmos DB emulator in a Docker container."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Browse to the emulator's quick-start page."}),(0,o.jsx)(n.br,{}),"\n","After installing the Cosmos DB emulator, browse to the quick-start page in your browser.",(0,o.jsx)(n.br,{}),"\n","You will find the location of the quick-start page in the ",(0,o.jsx)(n.em,{children:"'Start the emulator'"})," section of the documentation, it is usually ",(0,o.jsx)(n.a,{href:"https://localhost:8081/_explorer/index.html",children:"https://localhost:8081/_explorer/index.html"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Find the Cosmos DB URI and primary key"}),(0,o.jsx)(n.br,{}),"\n","The screenshot below shows the location of the Cosmos DB ",(0,o.jsx)(n.code,{children:"URI"})," and the ",(0,o.jsx)(n.code,{children:"Primary Key"}),".  Make a note of these values."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Cosmos DB URI and Key",src:t(7743).A+"",width:"2432",height:"792"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Create the database and container"}),(0,o.jsx)(n.br,{}),"\n","Create a collection called ",(0,o.jsx)(n.code,{children:"Stacks"}),".  This must match the value of the ",(0,o.jsx)(n.code,{children:"CosmosDb:DatabaseName"})," setting in the ",(0,o.jsx)(n.code,{children:"appsettings.json"})," file, an example is shown below.  Create a container id called ",(0,o.jsx)(n.code,{children:"Menu"}),", which is the name of your domain object.  If, when you created your project, you chose a different domain object name, you should use this name for your container.  Finally choose ",(0,o.jsx)(n.code,{children:"/id"})," for your partition key."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"CosmosDB",src:t(4781).A+"",width:"1238",height:"685"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the URI to appsettings.json"}),(0,o.jsx)(n.br,{}),"\n","Open the ",(0,o.jsx)(n.code,{children:"Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"})," file, where Company.Project is the name of your project.  Set the ",(0,o.jsx)(n.code,{children:"CosmosDb:DatabaseAccountUri"})," to the URI value that we made a note of in step 2. An example is shown below:"]}),"\n"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"',children:'"CosmosDb": {\n  "DatabaseAccountUri": "<Add your Cosmos DB Account URI here>",\n  "DatabaseName": "Stacks",\n  "SecurityKeySecret": {\n    "Identifier": "COSMOSDB_KEY",\n  }\n}\n'})})]})]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Run Cosmos DB locally in a container."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Install the Cosmos DB container."}),(0,o.jsx)(n.br,{}),"\n","Follow the ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/cosmos-db/how-to-develop-emulator?tabs=docker-linux%2Ccsharp&pivots=api-nosql",children:"instructions provided by Microsoft"})," to install and start the emulator in a Docker Container."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Browse to the emulator's quick-start page."}),(0,o.jsx)(n.br,{}),"\n","After installing the Cosmos DB container, browse to the quick-start page in your browser.",(0,o.jsx)(n.br,{}),"\n","You will find the location of the quick-start page in the ",(0,o.jsx)(n.em,{children:"'Start the emulator'"})," section of the documentation."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Find the Cosmos DB URI and primary key"}),(0,o.jsx)(n.br,{}),"\n","The screenshot below shows the location of the Cosmos DB ",(0,o.jsx)(n.code,{children:"URI"})," and the ",(0,o.jsx)(n.code,{children:"Primary Key"}),".  Make a note of these values."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Cosmos DB URI and Key",src:t(7743).A+"",width:"2432",height:"792"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Create the database and container"}),(0,o.jsx)(n.br,{}),"\n","Create a collection called ",(0,o.jsx)(n.code,{children:"Stacks"}),".  This must match the value of the ",(0,o.jsx)(n.code,{children:"CosmosDb:DatabaseName"})," setting in the ",(0,o.jsx)(n.code,{children:"appsettings.json"})," file.  Create a container id called ",(0,o.jsx)(n.code,{children:"Menu"}),", which is the name of your domain object.  If, when you created your project, you chose a different domain object name, you should use this name for your container.  Finally choose ",(0,o.jsx)(n.code,{children:"/id"})," for your partition key."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"CosmosDB",src:t(4781).A+"",width:"1238",height:"685"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the URI to appsettings.json"}),(0,o.jsx)(n.br,{}),"\n","Open the ",(0,o.jsx)(n.code,{children:"Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"})," file, where Company.Project is the name of your project.  Set the ",(0,o.jsx)(n.code,{children:"CosmosDb:DatabaseAccountUri"})," to the URI value that we made a note of in step 2. An example is shown below."]}),"\n"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"',children:'"CosmosDb": {\n  "DatabaseAccountUri": "<Add your Cosmos DB Account URI here>",\n  "DatabaseName": "Stacks",\n  "SecurityKeySecret": {\n    "Identifier": "COSMOSDB_KEY",\n  }\n}\n'})})]})]}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Connecting to a Cosmos DB instance in Azure."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate the your Cosmos DB"}),(0,o.jsx)(n.br,{}),"\n","Login to your Azure account and type ",(0,o.jsx)(n.em,{children:"'Azure Cosmos DB'"})," in the search bar at the top of the page to list all of your Cosmos DB instances.  Then click the one that you wish to use."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate your database URI and primary key."}),(0,o.jsx)(n.br,{}),"\n","From the left hand menu, choose Settings/Keys.  In the keys blade that appears to the right, click the eye icon next to the Primary Key to reveal its value.  Make a note of the ",(0,o.jsx)(n.code,{children:"URI"})," and the ",(0,o.jsx)(n.code,{children:"Primary Key"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the URI to appsettings.json"}),(0,o.jsx)(n.br,{}),"\n","Open the ",(0,o.jsx)(n.code,{children:"Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"})," file, where Company.Project is the name of your project.  Set the ",(0,o.jsx)(n.code,{children:"CosmosDb:DatabaseAccountUri"})," to the URI value that we made a note of in step 2. An example is shown below."]}),"\n"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"',children:'"CosmosDb": {\n  "DatabaseAccountUri": "<Add your Cosmos DB Account URI here>",\n  "DatabaseName": "Stacks",\n  "SecurityKeySecret": {\n    "Identifier": "COSMOSDB_KEY",\n  }\n}\n'})})]})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"CosmosDb:SecurityKeySecret:Identifier"})," value in the ",(0,o.jsx)(n.code,{children:"Company.Project/cqrs/src/api/Company.Project.API/appsettings.json"})," file defines the name of the environment variable that we need to set.  The default name for the environment variable is ",(0,o.jsx)(n.code,{children:"COSMOSDB_KEY"})," but you can change it if you wish. In this guide, we will assume we are working with the default value."]}),"\n",(0,o.jsxs)(n.p,{children:["Choose one of the following methods to set the ",(0,o.jsx)(n.code,{children:"COSMOSDB_KEY"})," environment variable.\nEach tab presents options for where you would like to run your Stacks project, locally on Windows, locally on Mac/linux or in a Docker container."]}),"\n",(0,o.jsx)("div",{children:(0,o.jsxs)(r.A,{defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Mac and Linux",value:"mac-and-linux"},{label:"Docker",value:"docker"}],children:[(0,o.jsxs)(a.A,{value:"windows",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Powershell to set the COSMOSDB_KEY environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"Powershell"})," with administrator privileges to execute the command below. Substitute ",(0,o.jsx)(n.code,{children:"<PRIMARY-KEY-HERE>"})," with the key that you made a note of."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-powershell",metastring:'title="Run PS command to add the COSMOSDB_KEY system variable"',children:'[Environment]::SetEnvironmentVariable("COSMOSDB_KEY", "<PRIMARY-KEY-HERE>", [EnvironmentVariableTarget]::Machine)\n'})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Visual Studio to set the COSMOSDB_KEY environment variable."}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Open the project in Visual Studio."}),(0,o.jsx)(n.br,{}),"\n","The solution file is located in the ",(0,o.jsx)(n.code,{children:"src/api/Company.Project.API.sln"})," folder.  Where Company.Project is the name of you chose when creating the project."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Edit the launchSettings.json file."}),(0,o.jsx)(n.br,{}),"\n","The launchSettings.json file is used to provide environment variables when a project is launched.  Open the file in the in the properties folder of the project and add the  ",(0,o.jsx)(n.strong,{children:"COSMOSDB_KEY"})," environment variable with the value that you made a note of.  There is an example below."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="src/api/Company.Project.API/properties/launchSettings.json"',children:'{\n  ...\n  "profiles": {\n    "Company.Project.API": {\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development",\n        "COSMOSDB_KEY": "<PRIMARY-KEY-HERE>"\n        ...\n      }\n    }\n  }\n}\n'})}),"\n"]}),"\n"]})})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the COSMOSDB_KEY environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the  ",(0,o.jsx)(n.strong,{children:"COSMOSDB_KEY"})," environment variable with the value that you made a note of.  There is an example below."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n   "COSMOSDB_KEY": "<PRIMARY-KEY-HERE>",\n}\n'})})]})]})]}),(0,o.jsxs)(a.A,{value:"mac-and-linux",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use terminal to set the COSMOSDB_KEY environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"terminal"})," to execute the command below.  Substitute ",(0,o.jsx)(n.code,{children:"<PRIMARY-KEY-HERE>"})," with the key that you made a note of to set the environment variable, only for the current session of your terminal."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Run terminal command to add the COSMOSDB_KEY system variable"',children:"export COSMOSDB_KEY=<PRIMARY-KEY-HERE>\n"})}),(0,o.jsxs)(n.p,{children:["To set the environment variable permanently on your system you'll have to edit your ",(0,o.jsx)(n.code,{children:"bash_profile"})," or ",(0,o.jsx)(n.code,{children:".zshenv"})," file depending on which shell are you using."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',children:"echo 'export COSMOSDB_KEY=<PRIMARY-KEY-HERE>' >> ~/.zshenv\n"})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the COSMOSDB_KEY environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the  ",(0,o.jsx)(n.strong,{children:"COSMOSDB_KEY"})," environment variable with the value that you made a note of.  There is an example below."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n    "COSMOSDB_KEY": "<PRIMARY-KEY-HERE>",\n}\n'})})]})]})]}),(0,o.jsx)(a.A,{value:"docker",children:(0,o.jsxs)(n.p,{children:["If you are running the application in a docker container, then environment variables are set when you use the ",(0,o.jsx)(n.code,{children:"docker run"})," command with the ",(0,o.jsx)(n.code,{children:"-e"})," switch.  Make a note of your Cosmos DB URL and Primary Key as we will use them in the ",(0,o.jsx)(n.a,{href:"https://stacks.ensono.com/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/build_and_run_project_netcore",children:"Build & Run REST API with CQRS"})," section of this guide."]})})]})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h4,{id:"configuring-dynamodb",children:"Configuring DynamoDB"}),"\n",(0,o.jsx)(n.p,{children:"To use DynamoDB you will need to create a DynamoDB instance in Amazon Web Services.  The following steps describe how to create a DynamoDB instance and configure you solution."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Create an AWS DynamoDB instance"}),(0,o.jsx)(n.br,{}),"\n","Follow the ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html",children:"AWS Developers guide to get started with DynamoDB"})," to create a DynamoDB instance.  When you create your instance, you may wish name it the same as your Domain Object when you create the project.  If you did not provide one, we recommend you use the default name of ",(0,o.jsx)(n.em,{children:"'menu'"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Configure the AWS CLI tools."}),(0,o.jsx)(n.br,{}),"\n","The template assumes that you are using the AWS CLI tools and have configured your access keys via the ",(0,o.jsx)(n.code,{children:"aws configure"})," command.  Follow the ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html",children:"AWS CLI configuration guide"})," and the ",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html",children:"AWS named profiles guide"})," to setup your CLI environment."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Edit the appsettings.json file"}),(0,o.jsx)(n.br,{}),"\n","To configure the project to use your DynamoDB instance, adjust the ",(0,o.jsx)(n.code,{children:".../cqrs/src/api/Company.Project.API/appsettings.json"})," file, where  Company.Project is the name that you chose for your project.  Add the following section to your appsettings.json file where the TableName value is the name of the instance that you created above."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="../cqrs/src/api/Company.Project.API/appsettings.json"',children:'"DynamoDb": {\n    "TableName": "Menu",\n    "TablePrefix": ""\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"configure-your-messaging-service",children:"Configure your messaging service"}),"\n",(0,o.jsxs)(n.p,{children:["When you created your project using the Stacks ",(0,o.jsx)(n.code,{children:"dotnet new"})," command, you had an option to choose a messaging service using either the ",(0,o.jsx)(n.code,{children:"-e"})," or ",(0,o.jsx)(n.code,{children:"--eventPublisher"})," switch.  Your options were either, Microsoft Azure Event Hub, Microsoft Azure Service Bus or Amazon Web Services Simple Notification Service.  Depending on the option that you chose, follow one of the guides below to configure your database."]}),"\n",(0,o.jsx)(n.h4,{id:"configure-azure-event-hub",children:"Configure Azure Event Hub"}),"\n",(0,o.jsx)(n.p,{children:"To use Azure Event Hubs as a messaging service,follow the steps below: -"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate the your Event Hub"}),(0,o.jsx)(n.br,{}),"\n","Login to you Azure account and type ",(0,o.jsx)(n.em,{children:"'Event Hubs'"})," in the search bar at the top of the page to list all of your Event Hub instances.  Then click the one that you wish to use.  Make a note of the name of the Event Hub."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate your Event Hub's connection string."}),(0,o.jsx)(n.br,{}),"\n","From the left hand menu, choose Settings/Shared Access Policies.  In the Shared Access Policies blade, choose a policy that has the ",(0,o.jsx)(n.code,{children:"send"})," claim and click it. Make a note of the value in the ",(0,o.jsx)(n.code,{children:"Primary Connection String"})," text box in the blade that appears to the right."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the Event Hub Name to appsettings.json"}),(0,o.jsx)(n.br,{}),"\n","To configure the project to use your Azure Event Hubs instance, adjust the .../cqrs/src/api/Company.Project.API/appsettings.json file, where Company.Project is the name that you chose for your project. Change the ",(0,o.jsx)(n.code,{children:"EventHubConfiguration:Publisher:EventHubName"})," value to the name of the Event Hub that we made a note of in step 1."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"EventHubConfiguration": {\n    "Publisher": {\n        "NamespaceConnectionString": {\n            "Identifier": "EVENTHUB_CONNECTIONSTRING",\n            "Source": "Environment"\n        },\n        "EventHubName": "stacks-event-hub"\n    }\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the Event Hub connection string as an environment variable."}),"\nThe connection string for the Event Hub is stored in an environment variable specified in the ",(0,o.jsx)(n.code,{children:"EventHubConfiguration:Publisher:NamespaceConnectionString:Identifier"})," value.  This guide assumes that we will use the default environment variable name of ",(0,o.jsx)(n.code,{children:"EVENTHUB_CONNECTIONSTRING"}),", but you may change its name in the appsettings.json file if you wish."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Choose one of the following methods to set the ",(0,o.jsx)(n.code,{children:"EVENTHUB_CONNECTIONSTRING"})," environment variable.\nEach tab presents options for where you would like to run your Stacks project, locally on Windows, locally on Mac/linux or in a Docker container."]}),"\n",(0,o.jsx)("div",{children:(0,o.jsxs)(r.A,{defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Mac and Linux",value:"mac-and-linux"},{label:"Docker",value:"docker"}],children:[(0,o.jsxs)(a.A,{value:"windows",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Powershell to set the EVENTHUB_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"Powershell"})," with administrator privileges to execute the command below. Substitute ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with the connection string that you made a note of."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-powershell",metastring:'title="Run PS command to add the EVENTHUB_CONNECTIONSTRING system variable"',children:'[Environment]::SetEnvironmentVariable("EVENTHUB_CONNECTIONSTRING", "<CONNECTION-STRING-HERE>", [EnvironmentVariableTarget]::Machine)\n'})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Visual Studio to set the EVENTHUB_CONNECTIONSTRING environment variable."}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Open the project in Visual Studio."}),(0,o.jsx)(n.br,{}),"\n","The solution file is located in the ",(0,o.jsx)(n.code,{children:"src/api/Company.Project.API.sln"})," folder.  Where Company.Project is the name of you chose when creating the project.  Open this solution in Visual Studio."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Edit the launchSettings.json file."}),(0,o.jsx)(n.br,{}),"\n","The launchSettings.json file is used to provide environment variables when a project is launched.  Open the file in the in the properties folder of the project and add the  ",(0,o.jsx)(n.strong,{children:"EVENTHUB_CONNECTIONSTRING"})," environment variable with the value that you made a note of.  In the example below, substitute ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your connection string."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="src/api/Company.Project.API/properties/launchSettings.json"',children:'{\n  "profiles": {\n    "Company.Project.API": {\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development",\n        "EVENTHUB_CONNECTIONSTRING": "<CONNECTION-STRING-HERE>"\n      }\n    }\n  }\n}\n'})}),"\n"]}),"\n"]})})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the EVENTHUB_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the ",(0,o.jsx)(n.strong,{children:"EVENTHUB_CONNECTIONSTRING"})," environment variable,  substituting ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your connection string."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n   "EVENTHUB_CONNECTIONSTRING": "<CONNECTION-STRING-HERE>",\n}\n'})})]})]})]}),(0,o.jsxs)(a.A,{value:"mac-and-linux",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use terminal to set the EVENTHUB_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"terminal"})," to execute the command below.  Substitute ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your own key to set the environment variable only for the current session of your terminal."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Run terminal command to add the EVENTHUB_CONNECTIONSTRING system variable"',children:"export EVENTHUB_CONNECTIONSTRING=<CONNECTION-STRING-HERE>\n"})}),(0,o.jsxs)(n.p,{children:["To set the environment variable permanently on your system you'll have to edit your ",(0,o.jsx)(n.code,{children:"bash_profile"})," or ",(0,o.jsx)(n.code,{children:".zshenv"})," file depending on which shell are you using."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',children:"echo 'export EVENTHUB_CONNECTIONSTRING=<CONNECTION-STRING-HERE>' >> ~/.zshenv\n"})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the EVENTHUB_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the  ",(0,o.jsx)(n.strong,{children:"EVENTHUB_CONNECTIONSTRING"})," environment variable with the value that you made a note of.  There is an example below."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n    "EVENTHUB_CONNECTIONSTRING": "<CONNECTION-STRING-HERE>",\n}\n'})})]})]})]}),(0,o.jsx)(a.A,{value:"docker",children:(0,o.jsxs)(n.p,{children:["If you are running the application in a docker container, then environment variables are set when you use the ",(0,o.jsx)(n.code,{children:"docker run"})," command with the ",(0,o.jsx)(n.code,{children:"-e"})," switch.  Make a note of your Event Hub Connection String as we will use it in the ",(0,o.jsx)(n.a,{href:"https://stacks.ensono.com/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/build_and_run_project_netcore",children:"Build & Run REST API with CQRS"})," section of this guide."]})})]})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h4,{id:"configure-azure-service-bus",children:"Configure Azure Service Bus"}),"\n",(0,o.jsx)(n.p,{children:"To use Azure Service Bus as a messaging service, follow the steps below."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate the your Azure Service Bus"}),(0,o.jsx)(n.br,{}),"\n","Login to you Azure account and type ",(0,o.jsx)(n.em,{children:"Service Bus"})," in the search bar at the top of the page to list all of your Service Bus instances.  From the left hand menu, choose Entities/Topics and make a note of the name of the Service Bus Topic that you wish to send to."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate your Azure Service Bus connection string."}),(0,o.jsx)(n.br,{}),"\n","From the left hand menu, choose Settings/Shared Access Policies.  In the Shared Access Policies blade, choose a policy that has the ",(0,o.jsx)(n.code,{children:"send"})," claim and click it. Make a note of the value in the ",(0,o.jsx)(n.code,{children:"Primary Connection String"})," text box."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add your topic name to appsettings.json"}),(0,o.jsx)(n.br,{}),"\n","To configure the project to use your Azure Service Bus instance, adjust the ../cqrs/src/api/Company.Project.API/appsettings.json file, where Company.Project is the name that you chose for your project. In the ",(0,o.jsx)(n.code,{children:"ServiceBusConfiguration"})," section, replace the ",(0,o.jsx)(n.code,{children:"<TOPIC-NAME-HERE>"})," placeholder with the name of your Azure Service Bus topic."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="../cqrs/src/api/Company.Project.API/appsettings.json"',children:'"ServiceBusConfiguration": {\n   "Sender": {\n       "Topics": [\n           {\n               "Name": "<TOPIC-NAME-HERE>",\n               "ConnectionStringSecret": {\n                   "Identifier": "SERVICEBUS_CONNECTIONSTRING",\n                   "Source": "Environment"\n               }\n           }\n       ]\n   }\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add your Azure Service Bus connection string as an environment variable."}),(0,o.jsx)(n.br,{}),"\n","The connection string for the Service Bus is stored in an environment variable specified in the ",(0,o.jsx)(n.code,{children:"ServiceBusConfiguration:Sender:Topics:ConnectionStringSecret:Identifier"})," value.  This guide assumes that we will use the default environment variable name of ",(0,o.jsx)(n.code,{children:"SERVICEBUS_CONNECTIONSTRING"}),", but you may change its name in the appsettings.json file if you wish."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Choose one of the following methods to set the ",(0,o.jsx)(n.code,{children:"SERVICEBUS_CONNECTIONSTRING"})," environment variable.\nEach tab presents options for where you would like to run your Stacks project, locally on Windows, locally/Mac or linux or in a Docker container."]}),"\n",(0,o.jsx)("div",{children:(0,o.jsxs)(r.A,{defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Mac and Linux",value:"mac-and-linux"},{label:"Docker",value:"docker"}],children:[(0,o.jsxs)(a.A,{value:"windows",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Powershell to set the SERVICEBUS_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"Powershell"})," with administrator privileges to execute the command below. Substitute ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your connection string."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-powershell",metastring:'title="Run PS command to add the SERVICEBUS_CONNECTIONSTRING system variable"',children:'[Environment]::SetEnvironmentVariable("", "<CONNECTION-STRING-HERE>", [EnvironmentVariableTarget]::Machine)\n'})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Visual Studio to set the SERVICEBUS_CONNECTIONSTRING environment variable."}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Open the project in Visual Studio."}),(0,o.jsx)(n.br,{}),"\n","The solution file is located in the ",(0,o.jsx)(n.code,{children:"src/api/Company.Project.API.sln"})," folder.  Where Company.Project is the name of you chose when creating the project.  Open this solution in Visual Studio."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Edit the launchSettings.json file."}),(0,o.jsx)(n.br,{}),"\n","The launchSettings.json file is used to provide environment variables when a project is launched.  Open the file in the in the properties folder of the project and add the  ",(0,o.jsx)(n.strong,{children:"SERVICEBUS_CONNECTIONSTRING"})," environment variable with the value that you made a note of.  In the example below, substitute ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your connection string."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="src/api/Company.Project.API/properties/launchSettings.json"',children:'{\n  ...\n  "profiles": {\n    "Company.Project.API": {\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development",\n        "SERVICEBUS_CONNECTIONSTRING": "<CONNECTION-STRING-HERE>"\n      }\n    }\n  }\n}\n'})}),"\n"]}),"\n"]})})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the SERVICEBUS_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the ",(0,o.jsx)(n.strong,{children:"SERVICEBUS_CONNECTIONSTRING"})," environment variable,  substituting ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your connection string."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n   "SERVICEBUS_CONNECTIONSTRING": "<CONNECTION-STRING-HERE>",\n}\n'})})]})]})]}),(0,o.jsxs)(a.A,{value:"mac-and-linux",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use terminal to set the SERVICEBUS_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"terminal"})," to execute the command below.  Substitute ",(0,o.jsx)(n.code,{children:"<CONNECTION-STRING-HERE>"})," with your own key to set the environment variable only for the current session of your terminal."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Run terminal command to add the SERVICEBUS_CONNECTIONSTRING system variable"',children:"export SERVICEBUS_CONNECTIONSTRING=<CONNECTION-STRING-HERE>\n"})}),(0,o.jsxs)(n.p,{children:["To set the environment variable permanently on your system you'll have to edit your ",(0,o.jsx)(n.code,{children:"bash_profile"})," or ",(0,o.jsx)(n.code,{children:".zshenv"})," file depending on which shell are you using."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',children:"echo 'export SERVICEBUS_CONNECTIONSTRING=<CONNECTION-STRING-HERE>' >> ~/.zshenv\n"})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the SERVICEBUS_CONNECTIONSTRING environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the  ",(0,o.jsx)(n.strong,{children:"SERVICEBUS_CONNECTIONSTRING"})," environment variable with the value that you made a note of.  There is an example below."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n    "SERVICEBUS_CONNECTIONSTRING": "<CONNECTION-STRING-HERE>",\n}\n'})})]})]})]}),(0,o.jsx)(a.A,{value:"docker",children:(0,o.jsxs)(n.p,{children:["If you are running the application in a docker container, then environment variables are set when you use the ",(0,o.jsx)(n.code,{children:"docker run"})," command with the ",(0,o.jsx)(n.code,{children:"-e"})," switch.  Make a note of your Service Bus Connection String as we will use it in the ",(0,o.jsx)(n.a,{href:"https://stacks.ensono.com/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/build_and_run_project_netcore",children:"Build & Run REST API with CQRS"})," section of this guide."]})})]})}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(n.h4,{id:"configuring-aws-simple-notification-service",children:"Configuring AWS Simple Notification Service"}),"\n",(0,o.jsx)(n.p,{children:"To use Simple Notification Service as a messaging service, follow the steps below."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate the your SNS Topic"}),(0,o.jsx)(n.br,{}),"\n","Login to you AWS account and type ",(0,o.jsx)(n.em,{children:"'SNS'"})," in the search bar at the top of the page.  Then chose Topics from the left hand menu to list all of your Topics.  Note, ensure you are in the correct region, shown in the top right-hand corner of the screen."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Locate your Topic Arn."}),(0,o.jsx)(n.br,{}),"\n","From the list of topics on the screen locate the topic that you wish to use and make a note of the TopicArn."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the AWS SNS configuration to appsettings.json"}),(0,o.jsx)(n.br,{}),"\n","To configure the project to use your AWS SNS instance, adjust the .../cqrs/src/api/Company.Project.API/appsettings.json file, where Company.Project is the name that you chose for your project.  Add an ",(0,o.jsx)(n.code,{children:"AwsSnsConfiguration"})," section and an ",(0,o.jsx)(n.code,{children:"AWS section"}),".  Replace the ",(0,o.jsx)(n.code,{children:"<YOUR-REGION-HERE>"})," placeholder with the region in which your topic resides, for example ",(0,o.jsx)(n.code,{children:"eu-west-2"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="/cqrs/src/api/Company.Project.API/appsettings.json"',children:'"AwsSnsConfiguration": {\n   "TopicArn": {\n     "Identifier": "TOPIC_ARN",\n   }\n },\n "AWS": {\n     "Region": "<YOUR-REGION-HERE>"\n }\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Add the TOPIC_ARN as an environment variable."}),"\nThe Topic ARN is stored in an environment variable specified in the ",(0,o.jsx)(n.code,{children:"AwsSnsConfiguration:Sender:TopicArn:Identifier"})," value.  This guide assumes that we will use the default environment variable name of ",(0,o.jsx)(n.code,{children:"TOPIC_ARN"}),", but you may change its name in the appsettings.json file if you wish."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Choose one of the following methods to set the ",(0,o.jsx)(n.code,{children:"TOPIC-ARN"})," environment variable.\nEach tab presents options for where you would like to run your Stacks project, locally on Windows, locally on Mac/linux or in a Docker container."]}),"\n",(0,o.jsx)("div",{children:(0,o.jsxs)(r.A,{defaultValue:"windows",values:[{label:"Windows",value:"windows"},{label:"Mac and Linux",value:"mac-and-linux"},{label:"Docker",value:"docker"}],children:[(0,o.jsxs)(a.A,{value:"windows",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Powershell to set the TOPIC-ARN environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"Powershell"})," with administrator privileges to execute the command below. Substitute ",(0,o.jsx)(n.code,{children:"<TOPIC-ARN-HERE>"})," with the connection string that you made a note of."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-powershell",metastring:'title="Run PS command to add the TOPIC-ARN system variable"',children:'[Environment]::SetEnvironmentVariable("TOPIC-ARN", "<TOPIC-ARN-HERE>", [EnvironmentVariableTarget]::Machine)\n'})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use Visual Studio to set the TOPIC-ARN environment variable."}),(0,o.jsx)("div",{children:(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Open the project in Visual Studio."}),(0,o.jsx)(n.br,{}),"\n","The solution file is located in the ",(0,o.jsx)(n.code,{children:"src/api/Company.Project.API.sln"})," folder.  Where Company.Project is the name of you chose when creating the project.  Open this solution in Visual Studio."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Edit the launchSettings.json file."}),(0,o.jsx)(n.br,{}),"\n","The launchSettings.json file is used to provide environment variables when a project is launched.  Open the file in the in the properties folder of the project and add the  ",(0,o.jsx)(n.strong,{children:"TOPIC-ARN"})," environment variable with the value that you made a note of.  In the example below, substitute ",(0,o.jsx)(n.code,{children:"<TOPIC-ARN-HERE>"})," with your connection string."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="src/api/Company.Project.API/properties/launchSettings.json"',children:'{\n  "profiles": {\n    "Company.Project.API": {\n      "environmentVariables": {\n        "ASPNETCORE_ENVIRONMENT": "Development",\n        "TOPIC-ARN": "<TOPIC-ARN-HERE>"\n      }\n    }\n  }\n}\n'})}),"\n"]}),"\n"]})})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the TOPIC-ARN environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["If you are using VS Code you will have a ",(0,o.jsx)(n.code,{children:"launch.json"})," file generated when you try to run the project. In this file there's an ",(0,o.jsx)(n.code,{children:"env"})," section used to provide environment variables when a project is launched.  Open this file and add the ",(0,o.jsx)(n.strong,{children:"TOPIC-ARN"})," environment variable,  substituting ",(0,o.jsx)(n.code,{children:"<TOPIC-ARN-HERE>"})," with your connection string."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="launch.json"',children:'"env": {\n   "TOPIC-ARN": "<TOPIC-ARN-HERE>",\n}\n'})})]})]})]}),(0,o.jsxs)(a.A,{value:"mac-and-linux",children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use terminal to set the TOPIC-ARN environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"terminal"})," to execute the command below.  Substitute ",(0,o.jsx)(n.code,{children:"<TOPIC-ARN-HERE>"})," with your own key to set the environment variable only for the current session of your terminal."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Run terminal command to add the TOPIC-ARN system variable"',children:"export TOPIC-ARN=<TOPIC-ARN-HERE>\n"})}),(0,o.jsxs)(n.p,{children:["To set the environment variable permanently on your system you'll have to edit your ",(0,o.jsx)(n.code,{children:"bash_profile"})," or ",(0,o.jsx)(n.code,{children:".zshenv"})," file depending on which shell are you using."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',children:"echo 'export TOPIC-ARN=<TOPIC-ARN-HERE>' >> ~/.zshenv\n"})})]})]}),(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Use VS Code to set the TOPIC-ARN environment variable."}),(0,o.jsxs)("div",{children:[(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"terminal"})," to execute the command below.  Substitute ",(0,o.jsx)(n.code,{children:"<TOPIC-ARN-HERE>"})," with your own key to set the environment variable only for the current session of your terminal."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Run terminal command to add the TOPIC-ARN system variable"',children:"export TOPIC-ARN=<TOPIC-ARN-HERE>\n"})}),(0,o.jsxs)(n.p,{children:["To set the environment variable permanently on your system you'll have to edit your ",(0,o.jsx)(n.code,{children:"bash_profile"})," or ",(0,o.jsx)(n.code,{children:".zshenv"})," file depending on which shell are you using."]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:'title="Example for setting env variable in .zchenv"',children:"echo 'export TOPIC-ARN=<TOPIC-ARN-HERE>' >> ~/.zshenv\n"})})]})]})]}),(0,o.jsx)(a.A,{value:"docker",children:(0,o.jsxs)(n.p,{children:["If you are running the application in a docker container, then environment variables are set when you use the ",(0,o.jsx)(n.code,{children:"docker run"})," command with the ",(0,o.jsx)(n.code,{children:"-e"})," switch.  Make a note of your Toptic ARN Connection String as we will use it in the ",(0,o.jsx)(n.a,{href:"https://stacks.ensono.com/docs/workloads/azure/backend/netcore/quickstart/web_api_cqrs/build_and_run_project_netcore",children:"Build & Run REST API with CQRS"})," section of this guide."]})})]})})]})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);