(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{126:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return b}));var n=a(2),o=a(6),r=(a(0),a(207)),i=a(218),c={id:"dependency_cosmos_java",title:"Stacks Azure CosmosDB module",sidebar_label:"Azure CosmosDB module",hide_title:!1,hide_table_of_contents:!0,keywords:["java","maven","module","modularity","archetype","azure","cosmosdb"]},l={unversionedId:"workloads/azure/backend/java/architecture/dependency_cosmos_java",id:"workloads/azure/backend/java/architecture/dependency_cosmos_java",isDocsHomePage:!1,title:"Stacks Azure CosmosDB module",description:"import {siteVariables} from '@site/versions';",source:"@site/docs/workloads/azure/backend/java/architecture/dependency_cosmos_java.md",slug:"/workloads/azure/backend/java/architecture/dependency_cosmos_java",permalink:"/docs/workloads/azure/backend/java/architecture/dependency_cosmos_java",version:"current",sidebar_label:"Azure CosmosDB module",sidebar:"docs",previous:{title:"Stacks Core Messaging module",permalink:"/docs/workloads/azure/backend/java/architecture/dependency_messaging_java"},next:{title:"Stacks Azure Service Bus module",permalink:"/docs/workloads/azure/backend/java/architecture/dependency_servicebus_java"}},s=[{value:"Module Overview",id:"module-overview",children:[]},{value:"Module Structure",id:"module-structure",children:[{value:"Project structure",id:"project-structure",children:[]}]},{value:"How to use",id:"how-to-use",children:[{value:"Use it as a dependency",id:"use-it-as-a-dependency",children:[]},{value:"Localized solution using Maven Archetypes",id:"localized-solution-using-maven-archetypes",children:[]},{value:"Building the module locally from this repository",id:"building-the-module-locally-from-this-repository",children:[]},{value:"Creating an Archetype from this repository",id:"creating-an-archetype-from-this-repository",children:[]}]},{value:"Accessing Artifactory",id:"accessing-artifactory",children:[]}],p={rightToc:s};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"module-overview"},"Module Overview"),Object(r.b)("p",null,"This module implements the ",Object(r.b)("inlineCode",{parentName:"p"},"StacksPersistence")," interface from the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/amido/stacks-java-core-commons"}),"commons module"),"\nfor the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.microsoft.com/en-us/azure/cosmos-db/"}),"Azure CosmosDb"),". Simply extending the\n",Object(r.b)("inlineCode",{parentName:"p"},"StacksCosmosRepository")," class gives you access to the Cosmos CRUD operations."),Object(r.b)("h2",{id:"module-structure"},"Module Structure"),Object(r.b)("p",null,"In the following diagram, you can see all the relevant files of this module. Be aware, pulling from\nthe repository will have some extra files that are not relevant to the logic but required to build and\ndeploy."),Object(r.b)("h3",{id:"project-structure"},"Project structure"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"java\n\\_.mvn\n: |_settings.xml\n|_archetype.properties\n|_pom.xml\n\\_src\n: \\_main\n:   \\_java\n:    \\_com.amido.stacks.cosmosdb\n:     \\_repository\n:      |_StacksCosmnosRepository.java\n")),Object(r.b)("h2",{id:"how-to-use"},"How to use"),Object(r.b)("p",null,"There are four ways to integrate this module into your project:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Use it as a ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#use-it-as-a-dependency"}),"dependency")),Object(r.b)("li",{parentName:"ul"},"Create a localized solution using ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#localized-solution-using-maven-archetypes"}),"Maven Archetypes artifacts")," available in our Artifactory repo"),Object(r.b)("li",{parentName:"ul"},"Clone this repo, ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#building-the-module-locally-from-this-repository"}),"locally build")," and use it as a Maven dependency"),Object(r.b)("li",{parentName:"ul"},"Clone this repo, create a ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#creating-an-archetype-from-this-repository"}),"custom archetype")," and then use it as a Maven dependency")),Object(r.b)("h3",{id:"use-it-as-a-dependency"},"Use it as a dependency"),Object(r.b)("h4",{id:"maven"},"Maven"),Object(r.b)("p",null,"In the ",Object(r.b)("inlineCode",{parentName:"p"},"dependencies")," section of your application's ",Object(r.b)("inlineCode",{parentName:"p"},"pom.xml")," add:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-xml"}),"<dependency>\n    <groupId>com.amido.stacks.modules</groupId>\n    <artifactId>stacks-azure-cosmos</artifactId>\n    <version>"+i.a.javaAzureCosmosVersion+"</version>\n</dependency>\n")),Object(r.b)("p",null,"Then you can do a ",Object(r.b)("inlineCode",{parentName:"p"},"./mvnw clean compile")," to fetch it; after that, you can use it like any other dependency."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./mvnw clean compile\n")),Object(r.b)("h4",{id:"others"},"Others"),Object(r.b)("p",null,"Use it as you'd use any dependency in your build tool."),Object(r.b)("h3",{id:"localized-solution-using-maven-archetypes"},"Localized solution using Maven Archetypes"),Object(r.b)("p",null,"If you wish to customise the module and use your organisation's namespaces instead of Amido's. You can create a\n",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://maven.apache.org/archetype/index.html"}),"Maven archetype"),". Archetype is Maven's tool for\nscaffolding and offers lots of extra functionality. We suggest spending some time looking into them. We use Archetype to create a template and enable you to adopt this module under your organisation's namespace.\nTo use the deployed archetypes:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Make and move to a new folder")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Then run"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"mvn archetype:generate \\\n    -DarchetypeGroupId='com.amido.stacks.modules' \\\n    -DarchetypeArtifactId='stacks-azure-cosmos-archetype' \\\n    -DarchetypeVersion='<archetype version>' \\\n    -DgroupId='<your-group-id>' \\\n    -DartifactId='<your-artifact-id>' \\\n    -Dversion='<your-version>' \\\n    -Dpackage='<package-name>'\n")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<your-group-id>")," is a placeholder for your group ID"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<your-artifact-id>")," is a placeholder for your artefact ID"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<your-version>")," is a placeholder for your version"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"<package-name>")," is a placeholder for the root package name and structure. It should start with your ",Object(r.b)("inlineCode",{parentName:"li"},"groupdId")," and continue with the name of the root package.")),Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},"For example, using ",Object(r.b)("inlineCode",{parentName:"p"},"-DgroupId=com.test")," and ",Object(r.b)("inlineCode",{parentName:"p"},"-Dpackage=com.test.stacks")," will instruct Maven to place the code in ",Object(r.b)("inlineCode",{parentName:"p"},"src/main/java/com/test/stacks")," and update all the relevant references accordingly (i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"imports"),")"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Go to the ",Object(r.b)("inlineCode",{parentName:"p"},"pom.xml")," file of the project you'll be using this module in and add it as a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#use-it-as-a-dependency"}),"dependency")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example"),": Using ",Object(r.b)("inlineCode",{parentName:"p"},"-DgroupId=com.test")," and ",Object(r.b)("inlineCode",{parentName:"p"},"-Dpackage=com.test.stacks")," will instruct Maven to place the code in ",Object(r.b)("inlineCode",{parentName:"p"},"src/main/java/com/test/stacks")," and update all the relevant references accordingly (i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"imports"),")"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"If you previously had used this module under different namespace (i.e. the default ",Object(r.b)("inlineCode",{parentName:"strong"},"com.amido.stacks.cosmosdb"),"):")),Object(r.b)("p",{parentName:"blockquote"},"Maven ONLY updates the imports for the module you generated. Any references in other projects will remain to the previous namespace."),Object(r.b)("p",{parentName:"blockquote"},"You will need to"),Object(r.b)("ul",{parentName:"blockquote"},Object(r.b)("li",{parentName:"ul"},"Update them manually"),Object(r.b)("li",{parentName:"ul"},"Re-create the relevant ",Object(r.b)("inlineCode",{parentName:"li"},"import")," statements to use the new-made module instead"),Object(r.b)("li",{parentName:"ul"},"If you plan to use this with Amido Stacks, include your namespace in the ",Object(r.b)("inlineCode",{parentName:"li"},"@ComponentScan")," annotation of the ",Object(r.b)("inlineCode",{parentName:"li"},"Application")," class."))),Object(r.b)("h3",{id:"building-the-module-locally-from-this-repository"},"Building the module locally from this repository"),Object(r.b)("p",null,"To build the module locally:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Clone this repo"),Object(r.b)("li",{parentName:"ol"},"Navigate to the ",Object(r.b)("inlineCode",{parentName:"li"},"java")," folder"),Object(r.b)("li",{parentName:"ol"},"run ",Object(r.b)("inlineCode",{parentName:"li"},"./mvnw clean install")," to install the module locally."),Object(r.b)("li",{parentName:"ol"},"Add it as any other ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#use-it-as-a-dependency"}),"dependency"))),Object(r.b)("h3",{id:"creating-an-archetype-from-this-repository"},"Creating an Archetype from this repository"),Object(r.b)("p",null,"If you wish to customise the module and use your organisation's namespaces instead of Amido's. You can create a\n",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://maven.apache.org/archetype/index.html"}),"Maven archetype"),". Archetype is Maven's tool for\nscaffolding and offers lots of extra functionality. We suggest spending some time looking into them. We use Archetype to create a template and enable you to adopt this module under your organisation's namespace.\nTo use the deployed archetypes:\nTo build, install and use the archetype follow these steps:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Clone this repo")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Navigate to the ",Object(r.b)("inlineCode",{parentName:"p"},"<directory you cloned the project into>/java")," in the terminal")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Then issue the following Maven commands, using the included wrapper:"),Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Create the archetype from the existing code"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"./mvnw archetype:create-from-project -DpropertyFile='./archetype.properties'\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Navigate to the folder it was created in"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"cd target/generated-sources/archetype\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Install the archetype locally"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"..\\..\\..\\mvnw install\n"))))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Make and navigate to a directory in which you'd like to create the localized project, ideally outside this project's root folder")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"To create the project, use the command below:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"<path-to-mvn-executable>/mvnw archetype:generate \\\n    -DarchetypeGroupId='com.amido' \\\n    -DarchetypeArtifactId='stacks-azure-cosmos' \\\n    -DarchetypeVersion='1.0.0-SNAPSHOT' \\\n    -DgroupId='<your-group-id>' \\\n    -DartifactId='<your-artifact-id>' \\\n    -Dversion='<your-version>' \\\n    -Dpackage='<package-name>'`\n")),Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"<your-group-id>")," is a placeholder for your group ID"),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"<your-artifact-id>")," is a placeholder for your artefact ID"),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"<your-version>")," is a placeholder for your version"),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"<package-name>")," is a placeholder for the root package name and structure. It should start with your ",Object(r.b)("inlineCode",{parentName:"li"},"groupdId")," and continue with the name of the root package.",Object(r.b)("blockquote",{parentName:"li"},Object(r.b)("p",{parentName:"blockquote"},"For example, using ",Object(r.b)("inlineCode",{parentName:"p"},"-DgroupId=com.test")," and ",Object(r.b)("inlineCode",{parentName:"p"},"-Dpackage=com.test.stacks")," will instruct Maven to place the code in ",Object(r.b)("inlineCode",{parentName:"p"},"src/main/java/com/test/stacks")," and update all the relevant references accordingly (i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"imports"),")"))))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Go to the ",Object(r.b)("inlineCode",{parentName:"p"},"pom.xml")," file of the project you'll be using this module in and add it as a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#use-it-as-a-dependency"}),"dependency")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example"),": Using ",Object(r.b)("inlineCode",{parentName:"p"},"-DgroupId=com.test")," and ",Object(r.b)("inlineCode",{parentName:"p"},"-Dpackage=com.test.stacks")," will instruct Maven to place the code in ",Object(r.b)("inlineCode",{parentName:"p"},"src/main/java/com/test/stacks")," and update all the relevant references accordingly (i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"imports"),")"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"If you previously had used this module under different namespace (i.e. the default ",Object(r.b)("inlineCode",{parentName:"strong"},"com.amido.stacks.cosmosdb"),"):")),Object(r.b)("p",{parentName:"blockquote"},"Maven ONLY updates the imports for the module you generated. Any references in other projects will remain to the previous namespace."),Object(r.b)("p",{parentName:"blockquote"},"You will need to"),Object(r.b)("ul",{parentName:"blockquote"},Object(r.b)("li",{parentName:"ul"},"Update them manually"),Object(r.b)("li",{parentName:"ul"},"Re-create the relevant ",Object(r.b)("inlineCode",{parentName:"li"},"import")," statements to use the new-made module instead"),Object(r.b)("li",{parentName:"ul"},"If you plan to use this with Amido Stacks, include your namespace in the ",Object(r.b)("inlineCode",{parentName:"li"},"@ComponentScan")," annotation of the ",Object(r.b)("inlineCode",{parentName:"li"},"Application")," class."))),Object(r.b)("h2",{id:"accessing-artifactory"},"Accessing Artifactory"),Object(r.b)("p",null,"Our artefacts and archetypes get hosted on an Artifactory repository. To use either, from a project\nother than Amido Stacks, you will need to add that repo in your ",Object(r.b)("inlineCode",{parentName:"p"},"pom.xml"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-xml"}),"<repositories>\n    <repository>\n        <snapshots />\n        <id>snapshots</id>\n        <name>default-maven-virtual</name>\n        <url>https://amidostacks.jfrog.io/artifactory/default-maven-virtual</url>\n    </repository>\n</repositories>\n")),Object(r.b)("p",null,"Alternatively, you can also add this configuration as a profile in your Maven's ",Object(r.b)("inlineCode",{parentName:"p"},"settings.xml")," file\nin the ",Object(r.b)("inlineCode",{parentName:"p"},".m2")," folder in your home directory (any OS):"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-xml"}),"<profiles>\n    <profile>\n        <repositories>\n            <repository>\n                <snapshots/>\n                <id>snapshots</id>\n                <name>default-maven-virtual</name>\n                <url>https://amidostacks.jfrog.io/artifactory/default-maven-virtual</url>\n            </repository>\n        </repositories>\n        <id>artifactory</id>\n    </profile>\n</profiles>\n\n<activeProfiles>\n    <activeProfile>artifactory</activeProfile>\n</activeProfiles>\n")))}b.isMDXComponent=!0},207:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},b=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||r;return a?o.a.createElement(m,c(c({ref:t},s),{},{components:a})):o.a.createElement(m,c({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<r;s++)i[s]=a[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},218:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var n={javaModuleParentVersion:"1.0.0",javaCommonsVersion:"1.0.0",javaApiVersion:"1.0.0",javaMessagingVersion:"1.0.0",javaCqrsVersion:"1.0.0",javaAzureCosmosVersion:"1.0.0",javaAzureServicebusVersion:"1.0.0"}}}]);